[{"categories":["第一技能"],"content":"项目地址： ElectronVue3 ","date":"2023-02-06","objectID":"/electron/:0:0","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"构建开发环境 按如下步骤搭建开发环境： ","date":"2023-02-06","objectID":"/electron/:1:0","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"创建项目 首先通过命令行创建一个 Vue 项目： npm create vite@latest electron -- --template vue-ts 安装 electron 依赖： npm i electron -D 调整 package.json 文件： { \"name\": \"electron\", \"private\": true, \"version\": \"0.0.0\", \"scripts\": { \"dev\": \"vite\", \"build\": \"vue-tsc --noEmit \u0026\u0026 vite build\", \"preview\": \"vite preview\" }, \"dependencies\": {}, \"devDependencies\": { \"@vitejs/plugin-vue\": \"^4.0.0\", \"electron\": \"^22.0.3\", \"typescript\": \"^4.9.3\", \"vite\": \"^4.0.0\", \"vue-tsc\": \"^1.0.11\", \"vue\": \"^3.2.45\" } } 将 vue 从 dependencies 移到 devDependencies。 在 Vite 编译项目的时候，Vue 库会被编译到输出目录下，输出目录下的内容是完整的，没必要把 Vue 标记为生产依赖；而且在我们将来制作安装包的时候，还要用到这个 package.json 文件，它的生产依赖里不应该有没用的东西。 去掉 type: module 配置项。 package.json 里的 type 定义了这个项目所有 .js 文件的处理方式。 如果 type 的值为 module，那么所有 .js 文件将被当做 ES Modules 对待。如果 type 的值为 commonjs，那么所有 .js 文件将被当做 CommonJS 模块对待。如果没有设置 type，那么它的默认值为 commonjs。 ","date":"2023-02-06","objectID":"/electron/:1:1","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"创建主进程代码 新建主进程入口文件：src/main/mainEntry.ts import { app, BrowserWindow } from \"electron\"; let mainWindow: BrowserWindow; app.whenReady().then(() =\u003e { mainWindow = new BrowserWindow({}); mainWindow.loadURL(process.argv[2]); }); app 是 Electron 的全局对象，用于控制整个应用程序的生命周期。 Electron 初始化完成后，app 对象的 ready 事件被触发。 app ready 后创建一个 BrowserWindow 对象，mainWindow 被设置为一个全局变量，避免被 JS 垃圾回收机制回收。 窗口加载了一个 Url 路径，这个路径以命令行参数（第三个参数）的方式传递给应用程序。 app 和 BrowserWindow 都是 Electron 的内置模块，这些内置模块是通过 ES Module 的形式导入进来的。 ","date":"2023-02-06","objectID":"/electron/:1:2","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"开发环境 Vite 插件 主进程的代码写好后，需要编译过之后才能被 Electron 加载，通过 Vite 插件的形式来完成编译和加载工作。 import { ViteDevServer } from 'vite'; interface IAddressInfo { address: string; port: string; } export let devPlugin = () =\u003e { return { name: 'dev-plugin', configureServer(server: ViteDevServer) { require('esbuild').buildSync({ entryPoints: ['./src/main/mainEntry.ts'], bundle: true, platform: 'node', outfile: './dist/mainEntry.js', external: ['electron'], }); server?.httpServer?.once('listening', () =\u003e { let { spawn } = require('child_process'); let addressInfo: IAddressInfo = server?.httpServer?.address() as unknown as IAddressInfo; let httpAddress = `http://${addressInfo?.address}:${addressInfo?.port}`; let electronProcess = spawn(require('electron').toString(), ['./dist/mainEntry.js', httpAddress], { cwd: process.cwd(), stdio: 'inherit', }); electronProcess.on('close', () =\u003e { server.close(); process.exit(); }); }); }, }; }; 注册了一个名为 configureServer 的钩子，当 Vite 启动 Http 服务时，configureServer 会执行。 入参为类型为 ViteDevServer 的对象 server，server 持有一个 http.Server 类型的属性 httpServer，这个属性代表调试 Vue 页面的 http 服务，一般情况下地址为：http://127.0.0.1:5173/。 通过监听 server.httpServer 的 listening 事件来判断 httpServer 是否已经成功启动。如果已经成功启动，就启动 Electron 应用，并给它传递两个命令行参数，第一个参数是主进程代码编译后的文件路径，第二个参数是 Vue 页面的 http 地址。 通过 Node.js child_process 模块的 spawn 方法启动 electron 子进程，除了两个命令行参数外，还传递了一个配置对象。 这个对象的 cwd 属性用于设置当前的工作目录，process.cwd() 返回的值就是当前项目的根目录。 stdio 用于设置 electron 进程的控制台输出，这里设置 inherit 可以让 electron 子进程的控制台输出数据同步到主进程的控制台。 在主进程中 console.log 的内容就可以在 VSCode 的控制台上看到了。 当 electron 子进程退出的时候，要关闭 Vite 的 http 服务，并且控制父进程退出，准备下一次启动。 http 服务启动之前，使用 esbuild 模块完成了主进程 TypeScript 代码的编译工作，这个模块是 Vite 自带的，不需要额外安装，可以直接使用。 主进程的入口文件是通过 entryPoints 配置属性设置的，编译完成后的输出文件是通过 outfile 属性配置的。 编译平台 platform 设置为 node，排除的模块 external 设置为 electron，这两个设置使在主进程代码中可以通过 import 的方式导入 electron 内置的模块，非但如此，Node 的内置模块也可以通过 import 的方式引入。 在 vite.config.ts 文件中引入： import { defineConfig } from 'vite'; import vue from '@vitejs/plugin-vue'; import { devPlugin } from './plugins/devPlugin'; // https://vitejs.dev/config/ export default defineConfig({ plugins: [devPlugin(), vue()], }) 在 tsconfig.node.json 中配置 plugins 路径： { \"compilerOptions\": { \"composite\": true, \"module\": \"ESNext\", \"moduleResolution\": \"Node\", \"allowSyntheticDefaultImports\": true }, \"include\": [\"vite.config.ts\", \"./plugins/*.*\"] } 执行命令 npm run dev: ","date":"2023-02-06","objectID":"/electron/:1:3","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"渲染进程集成内置模块 现在主进程内可以自由的使用 Electron 和 Node.js 的内置模块了，但渲染进程还不行。 修改主进程代码，打开渲染进程的一些开关，允许渲染进程使用 Node.js 的内置模块: import { app, BrowserWindow } from 'electron'; process.env.ELECTRON_DISABLE_SECURITY_WARNINGS = 'true'; let mainWindow: BrowserWindow; app.whenReady().then(() =\u003e { let config = { webPreferences: { nodeIntegration: true, webSecurity: false, allowRunningInsecureContent: true, contextIsolation: false, webviewTag: true, spellcheck: false, disableHtmlFullscreenWindowResize: true, }, }; mainWindow = new BrowserWindow(config); mainWindow.webContents.openDevTools({ mode: 'undocked' }); mainWindow.loadURL(process.argv[2]); }); ELECTRON_DISABLE_SECURITY_WARNINGS 用于设置渲染进程开发者调试工具的警告，这里设置为 true 就不会再显示任何警告了。 nodeIntegration配置项的作用是把 Node.js 环境集成到渲染进程中。 contextIsolation配置项的作用是在同一个 JavaScript 上下文中使用 Electron API。 webContents的openDevTools方法用于打开开发者调试工具。 现在可以在开发者调试工具中访问 Node.js 和 Electron 的内置模块了。 ","date":"2023-02-06","objectID":"/electron/:1:4","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"设置模块别名与解析钩子 虽然可以在开发者调试工具中使用 Node.js 和 Electron 的内置模块，但现在还不能在 Vue 的页面内使用这些模块。 因为 Vite 主动屏蔽了这些内置的模块，如果开发者强行引入它们，那么大概率会得到如下报错： Module \"xxxx\" has been externalized for browser compatibility and cannot be accessed in client code. 安装 vite-plugin-optimizer： npm i vite-plugin-optimizer -D 修改 vite.config.ts 的代码，让 Vite 加载这个插件： import { defineConfig } from 'vite'; import vue from '@vitejs/plugin-vue'; import { devPlugin, getReplacer } from './plugins/devPlugin'; import optimizer from 'vite-plugin-optimizer'; // https://vitejs.dev/config/ export default defineConfig({ plugins: [optimizer(getReplacer()), devPlugin(), vue()], }) vite-plugin-optimizer 插件会创建一个临时目录：node_modules.vite-plugin-optimizer。 然后把类似 const fs = require(‘fs’); export { fs as default } 这样的代码写入这个目录下的 fs.js 文件中。 渲染进程执行到：import fs from “fs” 时，就会请求这个目录下的 fs.js 文件，这样就达到了在渲染进程中引入 Node 内置模块的目的。 getReplacer 方法是为 vite-plugin-optimizer 插件提供的内置模块列表: export let getReplacer = () =\u003e { let externalModels = ['os', 'fs', 'path', 'events', 'child_process', 'crypto', 'http', 'buffer', 'url', 'better-sqlite3', 'knex']; let result = {}; for (let item of externalModels) { result[item] = () =\u003e ({ find: new RegExp(`^${item}$`), code: `const ${item} = require('${item}'); export { ${item} as default }`, }); } result['electron'] = () =\u003e { let electronModules = ['clipboard', 'ipcRenderer', 'nativeImage', 'shell', 'webFrame'].join(','); return { find: new RegExp(`^electron$`), code: `const {${electronModules}} = require('electron'); export { ${electronModules} }`, } } return result; } 在这个方法中把一些常用的 Node 模块和 electron 的内置模块提供给了 vite-plugin-optimizer 插件，以后想要增加新的内置模块只要修改这个方法即可。 vite-plugin-optimizer 插件不仅用于开发环境，编译 Vue 项目时，它也会参与工作。 通过如下代码在 Vue 组件中做测试： // src\\App.vue import fs from \"fs\"; import { ipcRenderer } from \"electron\"; import { onMounted } from \"vue\"; onMounted(() =\u003e { console.log(fs.writeFileSync); console.log(ipcRenderer); }); 开发者调试工具将会输出如下内容： ","date":"2023-02-06","objectID":"/electron/:1:5","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"构建生产环境 制作一个 Vite 插件。通过这个新的插件生成安装包，有了安装包就可以把应用分发给用户了。 ","date":"2023-02-06","objectID":"/electron/:2:0","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"编译结束钩子函数 vite.config.ts 增加一个新的配置： import { defineConfig } from 'vite'; import vue from '@vitejs/plugin-vue'; import { devPlugin, getReplacer } from './plugins/devPlugin'; import { buildPlugin } from './plugins/buildPlugin'; import optimizer from 'vite-plugin-optimizer'; // https://vitejs.dev/config/ export default defineConfig({ build: { rollupOptions: { plugins: [buildPlugin()], }, }, plugins: [optimizer(getReplacer()), devPlugin(), vue()], }) ","date":"2023-02-06","objectID":"/electron/:2:1","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"制作应用安装包 vite 编译完成之后，也就是执行 npm run build 指令，将在项目dist目录内会生成一系列的文件（如下图所示），此时 closeBundle 钩子被调用，在这个钩子中把上述生成的文件打包成一个应用程序安装包。 import path from 'path'; import fs from 'fs'; class BuildObj { // 编译主进程代码 buildMain() { require('esbuild').buildSync({ entryPoints: ['./src/main/mainEntry.ts'], bundle: true, platform: 'node', minify: true, outfile: './dist/mainEntry.js', external: ['electron'], }); } // 为生产环境准备package.json preparePackageJson() { let pkgJsonPath = path.join(process.cwd(), 'package.json'); let localPkgJson = JSON.parse(fs.readFileSync(pkgJsonPath, 'utf-8')); let electronConfig = localPkgJson.devDependencies.electron.replace('^', ''); localPkgJson.main = 'mainEntry.js'; delete localPkgJson['scripts']; delete localPkgJson['devDependencies']; localPkgJson.devDependencies = { electron: electronConfig, }; let tarJsonPath = path.join(process.cwd(), 'dist', 'package.json'); fs.writeFileSync(tarJsonPath, JSON.stringify(localPkgJson)); fs.mkdirSync(path.join(process.cwd(), 'dist/node_modules')); } // 使用electron-builder制成安装包 buildInstaller() { let options = { config: { directories: { output: path.join(process.cwd(), 'release'), app: path.join(process.cwd(), 'dist'), }, files: ['**'], extends: null, productName: 'Electron', appId: 'com.xxx.desktop', asar: true, nsis: { oneClick: true, perMachine: true, allowToChangeInstallationDirectory: false, createDesktopShortcut: true, createStartMenuShortcut: true, shortcutName: 'ElectronDesktop', }, publish: [{ provider: 'generic', url: 'http://localhost:5500/', }], }, project: process.cwd(), }; return require('electron-builder').build(options); } } export let buildPlugin = () =\u003e { return { name: 'build-plugin', closeBundle: () =\u003e { let buildObj = new BuildObj(); buildObj?.buildMain(); buildObj?.preparePackageJson(); buildObj?.buildInstaller(); } } } 这个对象通过三个方法提供了三个功能： buildMain。由于 ite 在编译之前会清空 dist 目录，所以在之前生成的 mainEntry.js 文件也被删除了，此处通过 buildMain 方法再次编译主进程代码。不过由于此处是在为生产环境编译代码，所以增加了minify: true 配置，生成压缩后的代码。 preparePackageJson。用户安装产品后，在启动应用程序时，实际上是通过 Electron 启动一个 Node.js 的项目，所以要为这个项目准备一个 package.json 文件，这个文件是以当前项目的 package.json 文件为蓝本制作而成的。里面注明了主进程的入口文件，移除了一些对最终用户没用的配置节。 buildInstaller。这个方法负责调用 electron-builder（npm install electron-builder -D 安装 electron-builder 库） 提供的 API 以生成安装包。最终生成的安装包被放置在 release 目录下，这是通过 config.directories.output 指定的。静态文件所在目录是通过 config.directories.app 配置项指定。其他配置项，请自行查阅官网文档。 生成 package.json 文件之后，还创建了一个 node_modules 目录。此举是为了阻止 electron-builder 的一些默认行为（目前来说它会阻止 electron-builder 创建一些没用的目录或文件）。 这段脚本还明确指定了 Electron 的版本号，如果 Electron 的版本号前面有\"^“符号的话，需把它删掉。这是 electron-builder 的一个 Bug，这个 bug 导致 electron-builder 无法识别带 ^ 或 ~ 符号的版本号。 做好这些配置之后，执行 npm run build 就可以制作安装包了，最终生成的安装文件会被放置到 release 目录下。 ","date":"2023-02-06","objectID":"/electron/:2:2","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"主进程生产环境加载本地文件 虽然成功制作了安装包，而且这个安装包可以正确安装应用程序，但是这个应用程序无法正常启动，这是因为应用程序的主进程还在通过 process.argv[2] 加载首页。显然用户通过安装包安装的应用程序没有这个参数。 接下来就要让应用程序在没有这个参数的时候，也能加载静态页面。 新建 src\\main\\CustomScheme.ts： import { protocol } from 'electron'; import path from 'path'; import fs from 'fs'; // 为自定义app协议提供特权 let schemeConfig = { standard: true, supportFetchAPI: true, bypassCSP: true, corsEnabled: true, stream: true, }; protocol.registerSchemesAsPrivileged([{ scheme: 'app', privileges: schemeConfig, }]); export class CustomScheme { // 根据文件扩展名获取mime-type private static getMimeType(extension: string) { let mineType = ''; switch (extension) { case '.js': mineType = 'text/javascript'; break; case '.html': mineType = 'text/html'; break; case '.css': mineType = 'text/css'; break; case '.svg': mineType = 'image/svg+xml'; break; case '.json': mineType = 'application/json'; break; } return mineType; }; // 注册自定义app协议 static registerScheme() { protocol.registerStreamProtocol('app', (request, callback) =\u003e { let pathName = new URL(request.url).pathname; let extension = path.extname(pathName).toLowerCase(); if (extension === '') { pathName = 'index.html'; extension = '.html'; } let tarFile = path.join(__dirname, pathName); callback({ statusCode: 200, headers: { 'content-type': this.getMimeType(extension), }, data: fs.createReadStream(tarFile), }) }); }; } 在主进程 app ready 前，通过 protocol 对象的 registerSchemesAsPrivileged 方法为名为 app 的 scheme 注册了特权（可以使用 FetchAPI、绕过内容安全策略等）。 在 app ready 之后，通过 protocol 对象的 registerStreamProtocol 方法为名为 app 的 scheme 注册了一个回调函数。当加载类似 app://index.html 这样的路径时，这个回调函数将被执行。 这个函数有两个传入参数 request 和 callback，通过 request.url 获取到请求的文件路径，通过 callback 做出响应。 给出响应时，要指定响应的 statusCode 和 content-type，这个 content-type 是通过文件的扩展名得到的。这里通过 getMimeType 方法确定了文件的 content-type。 响应的 data 属性为目标文件的可读数据流，当你的静态文件比较大时，不必读出整个文件再给出响应。 接下来在 src\\main\\mainEntry.ts 中使用这段代码： import {CustomScheme} from './customScheme'; if (process.argv[2]) { mainWindow.loadURL(process.argv[2]); } else { CustomScheme.registerScheme(); mainWindow.loadURL('app\"//index.html'); } 这样当存在指定的命令行参数时，就认为是开发环境，使用命令行参数加载页面，当不存在命令行参数时，就认为是生产环境，通过 app:// scheme 加载页面。 ","date":"2023-02-06","objectID":"/electron/:2:3","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"设计工程项目结构 在继续引入新的模块或组件之前，先调整一下工程的结构： dist 目录是打包过程的临时产物放置目录。 plugins 目录放置开发环境 vite 插件和打包 vite 插件。 release 目录放置最终生成的安装包。 resource 目录放置一些外部资源，比如应用程序图标、第三方类库等。 src/common 目录放置主进程和渲染进程都会用到的公共代码，比如日期格式化的工具类、数据库访问工具类等，主进程和渲染进程的代码都有可能使用这些类。 src/main 目录放置主进程的代码。 src/model 目录放置应用程序的模型文件，比如消息类、会话类、用户设置类等，主进程和渲染进程的代码都有可能使用这些类。 src/renderer 目录放置渲染进程的代码。 src/renderer/assets 放置字体图标、公共样式、图片等文件。 src/renderer/components 放置公共组件，比如标题栏组件、菜单组件等。 src/renderer/store 目录存放 Vue 项目的数据状态组件，用于在不同的 Vue 组件中共享数据。 src/renderer/router 目录存放 Vue 项目的路由配置信息。 src/renderer/indow 目录存放不同窗口的入口组件，这些组件是通过 vue-router 导航的，这个目录下的子目录存放对应窗口的子组件。 src/renderer/App.vue 是渲染进程的入口组件，这个组件内只有一个用于导航到不同的窗口。 src/renderer/main.ts 是渲染进程的入口脚本。 index.html 是渲染进程的入口页面。 vite.config.ts 是 vite 的配置文件。 调整好工程结构后，要修改一下 index.html 的代码才能让这些调整生效。实际上就是修改一下渲染进程入口脚本的引入路径: \u003cscript type=\"module\" src=\"/src/renderer/main.ts\"\u003e\u003c/script\u003e ","date":"2023-02-06","objectID":"/electron/:3:0","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"引入 vue-router 安装 vue-router 模块： npm install vue-router@4 -D 安装完成后，为 src/renderer/router/index.ts 添加如下代码逻辑： import * as VueRouter from 'vue-router'; // 路由规则数组 const routes = [{ path: '/', redirect: '/WindowMain/Chat', }, { path: '/WindowMain', component: () =\u003e import('../window/WindowMain.vue'), children: [{ path: 'Chat', component: () =\u003e import('../window/WindowMain/Chat.vue'), }, { path: 'Contact', component: () =\u003e import('../window/WindowMain/Contact.vue'), }, { path: 'Collection', component: () =\u003e import('../window/WindowMain/Collection.vue'), },] }, { path: '/WindowSetting', component: () =\u003e import('../window/WindowSetting.vue'), children: [ { path: 'AccountSetting', component: () =\u003e import('../window/WindowSetting/AccountSetting.vue'), } ] }, { path: '/WindowUserInfo', component: () =\u003e import('../window/WindowUserInfo.vue'), }] export let router = VueRouter.createRouter({ history: VueRouter.createWebHistory(), routes, }); 这段代码导出了一个 router 对象，这个 router 对象是基于 WebHistory 模式创建路由的，也就是说页面路径看起来是这样的：http://127.0.0.1:5173/WindowMain/PageChat（开发环境），app://index.html/WindowMain/PageChat（生产环境）。 上述代码中 routes 数组里的内容就是导航的具体配置，在这些配置中使用 import 方法动态引入 Vue 组件，vite 在处理这种动态引入的组件时，会把对应的组件编译到独立的源码文件中，类似 WindowUserInfo.689249b8.js 和 WindowSetting.6354f6d6.js，这种编译策略可以帮助控制最终编译产物的大小，避免应用启动时就加载一个庞大的 JavaScript 文件。 在应用启动时请求的路径是：”/\"，这个路径被重定向到\"/WindowMain/Chat\"，也就是说 WindowMain 组件和 Chat 组件是首页组件（这是在第一个导航配置对象中设置的）。 上述代码完成后，需要在 main.ts 中使用它，代码如下： import { createApp } from 'vue'; import './style.css'; import { router } from './router'; import App from './App.vue'; createApp(App).use(router).mount('#app'); 接下来把 App.vue 的代码修改成如下内容： \u003ctemplate\u003e \u003crouter-view /\u003e \u003c/template\u003e 应用启动时，第一个窗口（主窗口）就会加载 src\\renderer\\window\\WindowMain.vue 组件的代码。 当在主窗口内打开别的子窗口时（弹出一个子窗口），只要加载类似这样的路径/WindowUserInfo，就可以让子窗口加载 src\\renderer\\Window\\WindowUserInfo.vue 这个组件。 ","date":"2023-02-06","objectID":"/electron/:4:0","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"菜单组件及跳转 在 src\\renderer\\components 目录下新建 BarLeft.vue 的组件，这是整个应用的侧边栏组件，里面放置应用程序的菜单： \u003ctemplate\u003e \u003cdiv class=\"BarLeft\"\u003e \u003cdiv class=\"userIcon\"\u003e \u003cimg src=\"../assets/avatar.jpg\" alt=\"\"\u003e \u003c/div\u003e \u003cdiv class=\"menu\"\u003e \u003crouter-link v-for=\"item in mainWindowRoutes\" :to=\"item.path\" :class=\"['menuItem', {'selected': item.isSelected}]\"\u003e \u003ci :class=\"['icon', item.isSelected ? item.iconSelected : item.icon]\"\u003e\u003c/i\u003e \u003c/router-link\u003e \u003c/div\u003e \u003cdiv class=\"setting\"\u003e \u003cdiv class=\"menuItem\"\u003e \u003ci class=\"icon icon-setting\" /\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/template\u003e \u003cscript setup lang=\"ts\"\u003e import { ref, watch } from 'vue'; import { useRoute } from 'vue-router'; let mainWindowRoutes = ref([ { path: '/WindowMain/Chat', isSelected: true, icon: 'icon-chat', iconSelected: 'icon-chat' }, { path: '/WindowMain/Contact', isSelected: false, icon: 'icon-tongxunlu1', iconSelected: 'icon-tongxunlu' }, { path: '/WindowMain/Collection', isSelected: false, icon: 'icon-shoucang1', iconSelected: 'icon-shoucang' }, ]) let route = useRoute(); watch( () =\u003e route, () =\u003e mainWindowRoutes.value.forEach(v =\u003e v.isSelected = v.path === route.fullPath), { immediate: true, deep: true, }) \u003c/script\u003e \u003cstyle scoped lang=\"scss\"\u003e .BarLeft { width: 54px; height: 100%; display: flex; flex-direction: column; background: rgb(46, 46, 46); -webkit-app-region: drag; } .userIcon { height: 84px; padding-top: 36px; box-sizing: border-box; img { width: 34px; height: 34px; margin-left: 10px; } } .menu { flex: 1; } .menuItem { height: 44px; line-height: 44px; text-align: center; padding-left: 12px; padding-right: 12px; display: block; text-decoration: none; color: rgb(126, 126, 126); cursor: pointer; -webkit-app-region: no-drag; i { font-size: 22px; } \u0026:hover { color: rgb(141, 141, 141); } } .selected { color: rgb(7, 193, 96); \u0026:hover { color: rgb(7, 193, 96); } } .setting { margin-bottom: 5px; } \u003c/style\u003e 样式为 menu 的 div 用于存放主窗口的菜单，通过 mainWindowRoutes 数组里的数据来渲染菜单。 router-link 组件会被渲染成 a 标签，当用户点击菜单时，主窗口的二级路由发生跳转（src\\renderer\\window\\WindowMain.vue）。 通过 watch 方法监控路由跳转的行为，当路由跳转后，遍历 mainWindowRoutes 数组内的对象，取消以前选中的菜单，选中新的菜单。 由于 mainWindowRoutes 是一个 Ref 对象，所以菜单被选中或取消选中之后，相应的菜单样式（和菜单内的字体图标）也会跟着变化。 在 WindowMain.vue 中添加如下代码： \u003cscript setup lang=\"ts\"\u003e import { ipcRenderer } from \"electron\"; import { onMounted } from \"vue\"; import BarLeft from \"../components/BarLeft.vue\"; onMounted(() =\u003e { ipcRenderer.invoke(\"showWindow\"); }); \u003c/script\u003e \u003ctemplate\u003e \u003cBarLeft /\u003e \u003cdiv class=\"pageBox\"\u003e \u003crouter-view /\u003e \u003c/div\u003e \u003c/template\u003e \u003cstyle scoped lang=\"scss\"\u003e .pageBox { flex: 1; height: 100%; border-top: 1px solid #e6e6e6; box-sizing: border-box; display: flex; margin-top: -1px; } \u003c/style\u003e ","date":"2023-02-06","objectID":"/electron/:5:0","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"引入字体图标 在 www.iconfont.cn/ 获得字体图标，Electron 使用 Chromium 核心，一般情况下只使用 iconfont.css 和 iconfont.ttf 这两个文件。把这两个文件放到 src/renderer/assets/icon 下，在 main.ts 导入一下 iconfont.css 就可以全局使用字体图标了。 import { createApp } from 'vue'; import './style.css'; import \"./assets/icon/iconfont.css\"; import { router } from './router'; import App from './App.vue'; createApp(App).use(router).mount('#app'); \u003ci class=\"icon icon-chat\"\u003e\u003c/i\u003e 如果 iconfont.ttf 足够小，那么 vite 会把它转义成 base64 编码的字符串，直接嵌入到样式文件中来达到少请求数量的目的，开发者可以通过在 vite.config.ts 中增加 build.assetsInlineLimit 配置（值设置为 0 即可）来关闭 vite 的这个行为。 运行项目： ","date":"2023-02-06","objectID":"/electron/:6:0","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"管控应用窗口 如何管控应用内的窗口，比如：什么时候显示窗口、如何通过自定义窗口标题栏来管控单个窗口等内容。 ","date":"2023-02-06","objectID":"/electron/:7:0","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"主窗口显示时机 在第一个窗口初始化的瞬间，会有一个黑窗口闪现一下，如下图所示： 按照 Electron 官网的建议，窗口一开始应该是隐藏的，在 ready-to-show 事件触发后再显示窗口，如下代码所示： const { BrowserWindow } = require(\"electron\"); const win = new BrowserWindow({ show: false }); win.once(\"ready-to-show\", () =\u003e { win.show(); }); 但这个事件的触发太早了，因为 Vue 项目的 HTML 加载之后，JavaScript 脚本还需要做很多事情才能把组件渲染出来。况且开发者可能还会在 Vue 组件初始化的早期做很多额外的工作，所以显示窗口不能依赖 ready-to-show 事件，必须手动控制。 主窗口对象 mainWindow 初始化时，把配置属性 show 设置为 false，就可以让主窗口初始化成功后处于隐藏状态。 接下来再在合适的时机让渲染进程控制主窗口显示出来即可。这里在 WindowMain.vue 组件渲染完成之后来完成这项工作，如下代码所示： import { ipcRenderer } from \"electron\"; import { onMounted } from \"vue\"; onMounted(() =\u003e { ipcRenderer.invoke(\"showWindow\"); }); ","date":"2023-02-06","objectID":"/electron/:7:1","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"自定义窗口标题栏 在 src/renderer/components 下新建 BarTop.vue，这是窗口标题栏组件： \u003ctemplate\u003e \u003cdiv class=\"topBar\"\u003e \u003cdiv class=\"winTitle\"\u003e{{ title }}}\u003c/div\u003e \u003cdiv class=\"winTool\"\u003e \u003cdiv @click=\"minimizeMainWindow\"\u003e \u003ci class=\"icon icon-minimize\"/\u003e \u003c/div\u003e \u003cdiv v-if=\"isMaximized\" @click=\"unmaximizeMainWindow\"\u003e \u003ci class=\"icon icon-restore\"/\u003e \u003c/div\u003e \u003cdiv v-else @click=\"maxmizeMainWin\"\u003e \u003ci class=\"icon icon-maximize\"/\u003e \u003c/div\u003e \u003cdiv @click=\"closeWindow\"\u003e \u003ci class=\"icon icon-close\"/\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/template\u003e \u003cscript lang=\"ts\" setup\u003e \u003c/script\u003e \u003cstyle lang=\"scss\" scoped\u003e .topBar { display: flex; height: 25px; line-height: 25px; -webkit-app-region: drag; /* 可拖拽区域 */ width: 100%; } .winTitle { flex: 1; padding-left: 12px; font-size: 14px; color: #888; } .winTool { height: 100%; display: flex; -webkit-app-region: no-drag; /* 可拖拽区域内的不可拖拽区域 */ } .winTool div { height: 100%; width: 34px; text-align: center; color: #999; cursor: pointer; line-height: 25px; } .winTool .icon { font-size: 10px; color: #666666; font-weight: bold; } .winTool div:hover { background: #efefef; } .winTool div:last-child:hover { background: #ff7875; } .winTool div:last-child:hover i { color: #fff !important; } \u003c/style\u003e 要自定义一个窗口的标题栏必须把窗口默认的标题栏取消掉才行。只需要在初始化 mainWindow 对象时（主进程里的逻辑），把窗口配置对象的 frame 属性设置为 false 就可以使这个窗口成为无边框窗口了。 窗口标题是通过 props 数据传递给标题栏组件的，也就是说标题栏的标题是由其父组件来确定的。 标题栏中可拖拽区域是通过样式 -webkit-app-region: drag 定义的，鼠标在这个样式定义的组件上拖拽可以移动窗口，双击可以放大或者还原窗口，如果这个组件内有子组件不希望拥有该能力，可以通过 -webkit-app-region: no-drag; 来取消此能力。 最大化、最小化、还原、关闭窗口等按钮的点击事件，都是通过 ipcRenderer.invoke 方法来调用主进程 CommonWindowEvent 类提供的消息管道来实现对应的功能的。 由于窗口最大化（或还原）不一定是通过点击最大化按钮（或还原按钮）触发的，有可能是通过双击标题栏可拖拽区域触发的，所以这里只能通过 ipcRenderer.on 来监听窗口的最大化或还原事件，以此来改变对应的最大化或还原按钮的显隐状态。不能在按钮点击事件中来完成这项工作。windowMaximized 消息和 windowUnmaximized 消息也是由主进程的 CommonWindowEvent 类发来的。 由于多个二级路由页面会引用 BarTop.vue，为了避免在切换路由的时候，反复通过 ipcRenderer.on 注册消息监听器，所以在组件的 onUnmounted 事件内注销了消息监听器，避免事件泄漏。 src/main/CommonWindowEvent.ts 的代码如下： import { BrowserWindow, ipcMain, app } from 'electron'; // 主进程公共消息处理逻辑 export class CommonWindowEvent { private static getWin(event: any) { return BrowserWindow.fromWebContents(event.sender); } public static listen() { ipcMain.handle('minimizeWindow', e =\u003e { this.getWin(e)?.minimize(); }); ipcMain.handle('maxmizeWindow', e =\u003e { this.getWin(e)?.maximize(); }); ipcMain.handle('unmaximizeWindow', e =\u003e { this.getWin(e)?.unmaximize(); }); ipcMain.handle('hideWindow', e =\u003e { this.getWin(e)?.hide(); }); ipcMain.handle('showWindow', e =\u003e { this.getWin(e)?.show(); }); ipcMain.handle('closeWindow', e =\u003e { this.getWin(e)?.close(); }); ipcMain.handle('resizable', e =\u003e this.getWin(e)?.isResizable()); ipcMain.handle('getPath', (e, name) =\u003e app.getPath(name)); } // 主进程公共事件处理逻辑 public static regWinEvent(win: BrowserWindow) { win.on('maximize', () =\u003e { win.webContents.send('windowMaximized'); }); win.on('unmaximize', () =\u003e { win.webContents.send('windowUnmaximized'); }) } } 在 listen 方法内部注册了一系列消息管道，方便渲染进程控制主进程的一些行为，标题栏组件的窗口的最大化、最小化、还原等功能都是在这里实现的。在 app ready 之后调用 CommonWindowEvent.listen(); 这个方法即可注册这些消息管道。 regWinEvent 方法负责为窗口对象注册事件，当窗口最大化或还原后，这些事件的处理函数负责把消息发送给渲染进程。标题栏的对应按钮的图标也会发生相应的变化，同样也是在 app ready 之后调用 CommonWindowEvent.regWinEvent(mainWindow); 这个方法即可。 在 src/main/mainEntry.ts 下添加如下代码： import {app, BrowserWindow} from 'electron'; import {CustomScheme} from \"./customScheme\"; import { CommonWindowEvent } from \"./CommonWindowEvent\"; process.env.ELECTRON_DISABLE_SECURITY_WARNINGS = 'true'; let mainWindow: BrowserWindow; // 调用 CommonWindowEvent.regWinEvent(win); app.on(\"browser-window-created\", (e, win) =\u003e { CommonWindowEvent.regWinEvent(win); }); app.whenReady().then(() =\u003e { let config = { webPreferences: { nodeIntegration: true, webSecurity: false, allowRunningInsecureContent: true, contextIsolation: false, webviewTag: true, spellcheck: false, disableHtmlFullscreenWindowResize: true, }, }; mainWindow = new BrowserWindow(config); mainWindow.webContents.openDevTools({mode: 'undocked'}); if (process.argv[2]) { mainWindow.loadURL(process.argv[2]); } else { CustomScheme.regi","date":"2023-02-06","objectID":"/electron/:7:2","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"窗口加载过慢解决方案 Electron 创建一个 BrowserWindow 对象，并让它成功渲染一个页面是非常耗时的，在一个普通配置的电脑上，这大概需要 2~5 秒左右的时间（少量用户反馈没这个问题）。 窗口池解决方案 提前准备 1 个或多个隐藏的窗口，让它们加载一个骨架屏页面，放到一个数组里，当应用程序需要打开一个新窗口时，就从这个数组里取出一个窗口，执行页内跳转，从骨架屏页面跳转到业务页面，然后再把这个窗口显示出来。这就消费掉了一个窗口。 当应用程序消费掉一个窗口之后，马上再创建一个新的加载了骨架屏页面的窗口放入数组，保证有足够的待命隐藏窗口。 当用户关闭某个加载了业务页面的窗口时，就把它从数组中删除掉。避免数组里存在无用的窗口。 这个方案之所以行之有效是因为在没有使用窗口时就提前准备好了窗口，等真正需要使用窗口时，仅仅是完成了一次页面跳转的工作，这个跳转工作可以在很短的时间内就完成。所以给用户的感知就是打开子窗口特别快。 webview 和 BrowserView 创建慢的问题也可以使用类似的方案解决。 然而这个方案有以下三个缺点。 无法优化整个应用的第一个窗口。 系统内部始终会有 1 到 2 个隐藏窗口处于待命状态，这无形中增加了用户的内存消耗。 虽然这个方案看上去逻辑比较简单，但要控制好所有的细节（比如，窗口间的通信、界面代码如何控制窗口的外观、如何实现模态子窗口等）还是非常繁琐的。 window.open 解决方案 Electron 允许使用 window.open 的方式打开一个子窗口，通过这种方式打开的子窗口不会创建新的进程，效率非常高，可以在几百毫秒内就为用户呈现窗口内容。 但对于一些复杂的需求却需要额外的处理才能满足需求，比如：系统设置子窗口，当用户完成某一项设置之后，要通知父窗口做出相应的改变。这是常见的父子窗口通信的需求。 首先需要为主窗口的 webContents 注册 setWindowOpenHandler 方法。 在 src/main/CommonWindowEvent.ts 中添加如下代码： mainWindow.webContents.setWindowOpenHandler((param) =\u003e { return { action: \"allow\", overrideBrowserWindowOptions: yourWindowConfig }; }); 使用 setWindowOpenHandler 方法的回调函数返回一个对象，这个对象中 action: “allow” 代表允许窗口打开，如果你想阻止窗口打开，那么只要返回 {action: “deny”} 即可。 返回对象的 overrideBrowserWindowOptions 属性的值是被打开的新窗口的配置对象。 在渲染进程中打开子窗口的代码如下所示: window.open(`/WindowSetting/AccountSetting`); window.open 打开新窗口之所以速度非常快，是因为用这种方式创建的新窗口不会创建新的进程。这也就意味着一个窗口崩溃会拖累其他窗口跟着崩溃（主窗口不受影响）。 使用 window.open 打开的新窗口还有一个问题，这类窗口在关闭之后虽然会释放掉大部分内存，但有一小部分内存无法释放（无论你打开多少个子窗口，全部关闭之后总会有那么固定的一小块内存无法释放），这与窗口池方案的内存损耗相当。 接下来介绍如何使用这个方案控制子窗口。 子窗口的标题栏消息 自定义主窗口的标题栏 BarTop.vue，标题栏组件需要监听主进程发来的 windowMaximized 消息和 windowUnmaximized 消息，子窗口当然也希望复用这个组件，然而子窗口的窗口对象是在 Electron 内部创建的，不是开发者创建的，没有子窗口的窗口对象，该如何使用 regWinEvent 方法为子窗口注册最大化和还原事件呢？ 这就需要用到 app 对象的 browser-window-created 事件，代码如下： // src/main/mainEntry.ts app.on(\"browser-window-created\", (e, win) =\u003e { CommonWindowEvent.regWinEvent(win); }); 每当有一个窗口被创建成功后，这个事件就会被触发，主窗口和使用 window.open 创建的子窗口都一样，这个事件的第二个参数就是窗口对象。 动态设置子窗口的配置 虽然可以在渲染进程中用 window.open 方法打开一个子窗口，但这个子窗口的配置信息目前还是在主进程中设置的（overrideBrowserWindowOptions），大部分时候要根据渲染进程的要求来改变子窗口的配置，所以最好的办法是由渲染进程来设置这些配置信息。 在 CommonWindowEvent 类的 regWinEvent 方法增加一段逻辑，代码如下： // 注册打开子窗口的回调函数 // @ts-ignore win.webContents.setWindowOpenHandler((param) =\u003e { // 基础窗口配置对象 let config = { frame: false, show: true, parent: null, webPreferences: { nodeIntegration: true, webSecurity: false, allowRunningInsecureContent: true, contextIsolation: false, webviewTag: true, spellcheck: false, disableHtmlFullscreenWindowResize: true, nativeWindowOpen: true, }, }; // 开发者自定义窗口配置对象 let features = JSON.parse(param.features); for (let p in features) { if (p === \"webPreferences\") { for (let p2 in features.webPreferences) { //@ts-ignore config.webPreferences[p2] = features.webPreferences[p2]; } } else { //@ts-ignore config[p] = features[p]; } } // @ts-ignore if (config[\"modal\"] === true) config.parent = win; // 允许打开窗口，并传递窗口配置对象 return {action: \"allow\", overrideBrowserWindowOptions: config}; }); config 对象和主窗口的 config 对象基本上是一样的，所以最好把它抽象出来。 param 参数的 features 属性是由渲染进程传过来的，是一个字符串，这里把它当作一个 JSON 字符串使用，这个字符串里包含着渲染进程提供的窗口配置项，这些配置项与 config 对象提供的基础配置项结合，最终形成了子窗口的配置项。 如果配置项中 modal 属性的值为 true 的话，说明渲染进程希望子窗口为一个模态窗口，这时要为子窗口提供父窗口配置项：parent，这个配置项的值就是当前窗口。 之所以把这段逻辑放置在 CommonWindowEvent 类的 regWinEvent 方法中，就是希望更方便地为应用内的所有窗口提供这项能力，如果不希望这么做，也可以把这段逻辑放置在一个独立的方法中。 在 src/renderer/components/BarLeft.vue 中添加如下代码： const openSettingWindow = () =\u003e { const config = { modal: true, width: 2002, webPreferences: { webviewTag: false } }; window.open(`/WindowSetting/AccountSetting`, \"_blank\", JSON.stringify(config)); }; window.open 方法的第三个参数官方定义为一个逗号分割的 key-value 列表，但这里把它变成了一个 JSON 字符串，这样做主要是为了方便地控制子窗口的配置对象。 使用 window.open 打开新窗口速度非常快，所以这里直接让新窗口显示出来了 config.show = true。如果你需要在新窗口初始化时完成复杂耗时的业务逻辑，那么你也应该手动控制新窗口的显示时机。 封装子窗口加载成功的事件 现在遇到了一个问题：不知道子窗口何时加载成功了，注意这里不能单纯地使用 window 对象的 onload 事件或者 document 对象的 DOMContentLoaded 事件来判断子窗口是否加载成功了。因为这个时候你的业务代码（比如从数据库异步读取数据的逻辑）可能尚未执行完成。 所以，要自己封装一个事件，在业务代码真正执行完成时，手动发射这个事件，告知主窗口：“现在子窗口已经加载成功啦，你可以给我发送消息了！” 在封装这个事件前，先来把 window.open 打开子窗口的逻辑封装到一个 Promise 对象中，如下代码所示： src/renderer/common/Dialog.ts ex","date":"2023-02-06","objectID":"/electron/:7:3","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"Pinia 管理应用状态 相比 Vuex，Pinia 的优势主要是： 没有 mutations，相应的工作都在 actions 中完成，actions 直接支持异步函数。 完美支持 TypeScript，Vuex 在这方面做得不是很好。 对开发工具支持友好，，Pinia 对调试工具（vue-devtools）也支持友好。 不需要再使用名称空间来控制 store，也不需要再考虑 store 的嵌套问题。 性能优于 Vuex。 ","date":"2023-02-06","objectID":"/electron/:8:0","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"安装 Pinia npm i pinia -D 修改渲染进程入口文件，加载 Pinia 插件： src/renderer/main.ts import {createApp} from 'vue'; import {router} from './router'; import { createPinia } from \"pinia\"; import App from './App.vue'; import './style.css'; import \"./assets/icon/iconfont.css\"; createApp(App).use(createPinia()).use(router).mount('#app'); ","date":"2023-02-06","objectID":"/electron/:8:1","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"创建 Store 在 src/renderer/store 目录下新建 index.ts，创建第一个 Store 程序，代码如下： import { defineStore } from 'pinia'; import { Ref, ref } from 'vue'; import { ModelChat } from '../../model/ModelChat'; // mock data const prepareData = () =\u003e { let result = []; for (let i = 0; i \u003c 10; i++) { let model = new ModelChat(); model.fromName = '聊天对象' + i; model.sendTime = '昨天'; model.lastMsg = '这是此会话的最后一条消息' + i; model.avatar = 'https://pic3.zhimg.com/v2-306cd8f07a20cba46873209739c6395d_im.jpg?source=32738c0c'; result.push(model); } return result; }; export const useChatStore = defineStore('chat', () =\u003e { let data: Ref\u003cModelChat[]\u003e = ref(prepareData()); const selectItem = (item: ModelChat) =\u003e { if (item.isSelected) return; data.value.forEach((v) =\u003e (v.isSelected = false)); item.isSelected = true; }; return { data, selectItem }; }); 通过 export 暴露 useChatStore 方法，这个方法通过 Pinia 的 defineStore 方法创建，在 Vue 业务组件中执行这个函数实例才会得到真正的 Store。 使用 defineStore(name, callback) 的形式创建 Store，这种形式的 Store 叫作 Setup Stores。Pinia 还提供了另一种形式的 Store ：Option Stores，具体可以参阅 Pinia 的官方文档。 这个 Store 的状态数据存储在：data 属性中，这是一个被 Ref 对象包裹着的数组，数组里的内容是通过 prepareData 方法模拟的（模拟了十个聊天会话对象）。 这个 Store 还提供了一个 actions 方法：selectItem，这个方法用于选中某个具体的聊天会话。 ","date":"2023-02-06","objectID":"/electron/:8:2","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"数据模型 Model 聊天会话的数据模型是在 src/model 目录下定义的，因为应用的主进程和渲染进程都可能会用到数据模型，所以把它放置在 renderer 和 main 的同级目录下。 新建 src/model/ModelChat.ts，如下所示： import { ModalBase } from './ModalBase'; export class ModelChat extends ModalBase { fromName?: string; sendTime?: string | number; isSelected = false; lastMsg?: string; avatar?: string; // 0 单聊，1 群聊，2 公众号，3 文件传输助手 chatType?: number; } 模型主要用于描述对象携带的信息，由于所有的模型都会拥有一些共同的字段，所以把这些字段放置在模型的基类 ModelBase 中。 新建 src/model/ModelBase.ts，如下所示： import crypto from 'crypto'; export class ModalBase { id: string; constructor() { this.id = crypto.randomUUID(); } } 暂时只提供了一个公共字段：id，凡继承于 ModelBase 的子类都将拥有这个字段，而且这个字段是随模型实例化的时候自动创建的。 只有 new ModelXXXX 时才会创建这个字段，let model = obj as ModelXXXX 时不会创建这个字段。 使用 Node.js crypto 模块的 randomUUID 方法来生成每个聊天会话的 ID。 ","date":"2023-02-06","objectID":"/electron/:8:3","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"使用 Store 首先把模型中模拟的 10 个聊天会话显示在界面上，代码如下所示： src/renderer/window/WindowMain/chat/components/ChatBoard.vue \u003ctemplate\u003e \u003cdiv class=\"ChatList\"\u003e \u003cChatSearch /\u003e \u003cdiv class=\"ListBox\"\u003e \u003cChatItem :data=\"item\" v-for=\"item in store.data\" :key=\"item.id\" /\u003e \u003c/div\u003e \u003c/div\u003e \u003c/template\u003e \u003cscript setup lang=\"ts\"\u003e import ChatItem from './ChatItem.vue'; import ChatSearch from './ChatSearch.vue'; import { onMounted } from 'vue'; import { useChatStore } from '../../../../store/useChatStore'; const store = useChatStore(); onMounted(() =\u003e { store.selectItem(store.data[6]); }); \u003c/script\u003e \u003cstyle scoped lang=\"scss\"\u003e .ChatList { width: 250px; display: flex; flex-direction: column; height: 100%; box-sizing: border-box; } .ListBox { background: rgb(230, 229, 229); background-image: linear-gradient(to bottom right, rgb(235, 234, 233), rgb(240, 240, 240)); flex: 1; overflow-y: auto; box-sizing: border-box; border-right: 1px solid rgb(214, 214, 214); } \u003c/style\u003e 通过 Vue 的 v-for 指令渲染了一个自定义组件列表（ChatItem）。 store 对象是通过 useChatStore 方法获取的，useChatStore 方法就是前面介绍的 useChatStore.ts 导出的方法。得到 store 对象之后，可以直接使用 store.data 获取 Store 对象里的数据。 在当前组件 ChatBoard 渲染完成后，调用了 store 对象的 selectItem 方法，选中了第 7 个会话。 具体每一个聊天会话对象是通过自定义组件的 data 属性传递到组件内部的。 ChatItem 自定义组件的代码如下所示： src/renderer/window/WindowMain/chat/components/ChatItem.vue \u003ctemplate\u003e \u003cdiv @click=\"itemClick(data)\" :class=\"['ChatItem', { 'ChatItemSelected': data.isSelected}]\"\u003e \u003cdiv class=\"avatar\"\u003e \u003cimg :src=\"data.avatar\" alt=\"\" /\u003e \u003c/div\u003e \u003cdiv class=\"ChatInfo\"\u003e \u003cdiv class=\"row\"\u003e \u003cdiv class=\"FromName\"\u003e{{ data.fromName }}\u003c/div\u003e \u003cdiv class=\"TimeName\"\u003e{{ data.sendTime }}\u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"row\"\u003e \u003cdiv class=\"LastMsg\"\u003e{{ data.lastMsg }}\u003c/div\u003e \u003cdiv class=\"subscribe\" /\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/template\u003e \u003cscript lang=\"ts\" setup\u003e import { ModelChat } from '../../../../../model/ModelChat'; import { useChatStore } from '../../../../store/useChatStore'; defineProps\u003c{data: ModelChat}\u003e(); const store = useChatStore(); const itemClick = (item: ModelChat) =\u003e { store.selectItem(item); }; \u003c/script\u003e \u003cstyle scoped lang=\"scss\"\u003e .ChatItem { display: flex; height: 66px; box-sizing: border-box; cursor: pointer; \u0026:hover { background: rgb(221, 219, 218); } } .ChatItemSelected { background: rgb(196, 196, 196); \u0026:hover { background: rgb(196, 196, 196); } } .avatar { width: 66px; display: flex; align-items: center; justify-content: center; img { width: 46px; height: 46px; } } .ChatInfo { flex: 1; height: 66px; display: flex; flex-direction: column; justify-content: center; } .row { box-sizing: border-box; height: 28px; line-height: 28px; display: flex; } .FromName { flex: 1; } .TimeName { color: rgb(153, 153, 153); padding-right: 12px; font-size: 12px; } .LastMsg { color: rgb(153, 153, 153); flex: 1; font-size: 12px; } \u003c/style\u003e 使用 defineProps 方法接收父组件传来的数据。 聊天会话对象里的数据在这个自定义组件中被展开，渲染给用户。 当用户点击这个自定义组件的时候，程序执行了 Store 对象的 selectItem 方法，这个方法负责选中用户点击的组件，改变了用户点击组件的样式，同时还取消了原来选中的组件。 ","date":"2023-02-06","objectID":"/electron/:8:4","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"订阅 Store 无论是用户点击 ChatItem 组件选中一个聊天会话，还是 ChatBoard 渲染完成后选中一个聊天会话，都应该通知其他组件，选中的聊天会话变更了。 在 MessageBoard 组件中演示这个功能，代码如下所示： src/renderer/window/WindowMain/chat/components/MessageBoard.vue \u003ctemplate\u003e \u003cdiv class=\"MessageBord\"\u003e \u003cBarTop /\u003e \u003cdiv class=\"MessageList\"\u003e{{ logInfo }}\u003c/div\u003e \u003c/div\u003e \u003c/template\u003e \u003cscript lang=\"ts\" setup\u003e import { ref } from 'vue'; import BarTop from '../../../../components/BarTop.vue'; import { useChatStore } from '../../../../store/useChatStore'; let store = useChatStore(); let logInfo = ref(\"\"); let curId = \"\"; //订阅Store内数据的变化 store.$subscribe((mutations, state) =\u003e { let item = state.data.find((v) =\u003e v.isSelected); let id = item?.id as string; if (id != curId) { logInfo.value = `现在应该加载ID为${item?.id}的聊天记录`; curId = id; } }); \u003c/script\u003e \u003cstyle scoped lang=\"scss\"\u003e .MessageBord { height: 100%; display: flex; flex: 1; flex-direction: column; } .MessageList { flex: 1; overflow-y: auto; overflow-x: hidden; background: rgb(245, 245, 245); } \u003c/style\u003e 使用 store 对象的 $subscribe 方法订阅了数据变更事件，无论什么时候 store 内的数据发生了变化，都会执行 $subscribe 方法提供的回调函数。 在订阅回调中，验证选中的会话是否发生了变化（有可能是当前 store 其他数据对象的变化触发了订阅回调），如果是，那么就给出提示。 订阅回调函数有两个参数 ，第一个是 mutations 参数，这个参数的 events 属性携带着变更前的值和变更后的值，但这个属性只有在开发环境下存在，生产环境下不存在。订阅的第二个参数是 state，这个参数包含 store 中的数据。 以这种方式更新 store 里的数据，不利于复用数据更新的逻辑，改用可以复用数据更新逻辑的方案。 ","date":"2023-02-06","objectID":"/electron/:8:5","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"互访 Store 新建一个模型类，代码如下所示： src/model/ModelMessage.ts import { ModalBase } from './ModalBase'; export class ModelMessage extends ModalBase { createTime?: number; receiveTime?: number; messageContent?: string; chatId?: string; fromName?: string; avatar?: string; // 是否为传入消息 isInMsg?: boolean; } 创建 useMessageStore，用于管理消息的状态数据，代码如下： src/renderer/store/useMessageStore.ts import { ModelChat } from '../../model/ModelChat'; import { ModelMessage } from '../../model/ModelMessage'; import { defineStore } from 'pinia'; import { ref, Ref } from 'vue'; export const useMessageStore = defineStore('message', () =\u003e { let data: Ref\u003cModelMessage[]\u003e = ref([]); const msg1 = `醉里挑灯看剑，梦回吹角连营。八百里分麾下灸，五十弦翻塞外声。沙场秋点兵。马作的卢飞快，弓如霹雳弦惊。了却君王天下事，嬴得生前身后名。可怜白发生`; const msg2 = `怒发冲冠，凭栏处，潇潇雨歇。抬望眼，仰天长啸，壮怀激烈。 三十功名尘与土，八千里路云和月。莫等闲，白了少年头，空悲切！ 靖康耻，犹未雪；臣子恨，何时灭?驾长车，踏破贺兰山缺！ 壮志饥餐胡虏肉，笑谈渴饮匈奴血。待从头，收拾旧山河，朝天阙！`; const initData = (chat: ModelChat) =\u003e { let result = []; for (let i = 0; i \u003c 10; i++) { let model = new ModelMessage(); model.createTime = Date.now(); model.isInMsg = i % 2 === 0; model.messageContent = model.isInMsg ? msg1 : msg2; model.fromName = model.isInMsg ? chat.fromName : \"我\"; model.avatar = chat.avatar; model.chatId = chat.id; result.push(model); } data.value = result; }; return { data, initData }; }); 消息数据是模拟出来的，这里模拟了 10 条消息，预期用户切换会话的时候，执行 initData 方法，初始化当前会话的消息。 修改一下 MessageBoard 组件的的代码，如下所示： src/renderer/window/WindowMain/chat/components/MessageBoard.vue \u003ctemplate\u003e \u003cdiv class=\"MessageBord\"\u003e \u003cBarTop /\u003e \u003cdiv class=\"MessageList\"\u003e \u003cMessageItem :data=\"item\" v-for=\"item in messageStore.data\" :key=\"item.id\"\u003e\u003c/MessageItem\u003e \u003c/div\u003e \u003c/div\u003e \u003c/template\u003e \u003cscript lang=\"ts\" setup\u003e import BarTop from '../../../../components/BarTop.vue'; import { ModelChat } from '../../../../../model/ModelChat'; import { useMessageStore } from '../../../../store/useMessageStore'; import { useChatStore } from '../../../../store/useChatStore'; import MessageItem from './MessageItem.vue'; const chatStore = useChatStore(); const messageStore = useMessageStore(); let curId = ''; chatStore.$subscribe((mutations, state) =\u003e { const item = state.data.find(v =\u003e v.isSelected) as ModelChat; if (item?.id !== curId) { messageStore.initData(item); curId = item?.id; } }) \u003c/script\u003e \u003cstyle scoped lang=\"scss\"\u003e .MessageBord { height: 100%; display: flex; flex: 1; flex-direction: column; } .MessageList { flex: 1; overflow-y: auto; overflow-x: hidden; background: rgb(245, 245, 245); } \u003c/style\u003e 当选中的聊天会话切换时，执行 messageStore 对象的 initData 方法，这样就初始化了 messageStore 内部的状态数据。 MessageItem 是新创建的一个 Vue 组件，这个组件用于显示一条消息的具体信息。代码如下所示： src/renderer/window/WindowMain/chat/components/MessageItem.vue \u003ctemplate\u003e \u003ctemplate v-if=\"data.isInMsg\"\u003e \u003cdiv class=\"MessageItem left\"\u003e \u003cdiv class=\"avatar\"\u003e \u003cimg :src=\"data.avatar\" alt=\"\" /\u003e \u003c/div\u003e \u003cdiv class=\"MessageBox\"\u003e \u003cdiv class=\"FromName\"\u003e{{ data.fromName }}\u003c/div\u003e \u003cdiv class=\"MsgContent\"\u003e{{ data.messageContent }}\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/template\u003e \u003ctemplate v-else\u003e \u003cdiv class=\"MessageItem right\"\u003e \u003cdiv class=\"MessageBox\"\u003e \u003cdiv class=\"MessageContent\"\u003e{{ data.messageContent }}\u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"avatar\"\u003e \u003cimg :src=\"data.avatar\" alt=\"\" /\u003e \u003c/div\u003e \u003c/div\u003e \u003c/template\u003e \u003c/template\u003e \u003cscript setup lang=\"ts\"\u003e import { ModelMessage } from '../../../../../model/ModelMessage'; defineProps\u003c{ data: ModelMessage }\u003e(); \u003c/script\u003e \u003cstyle lang=\"scss\" scoped\u003e .MessageItem { display: flex; padding-top: 8px; padding-bottom: 8px; position: relative; } .left { padding-right: 30%; \u0026::after { width: 0; height: 0; border-top: 6px solid transparent; border-bottom: 6px solid transparent; border-right: 6px solid #fff; position: absolute; left: 60px; top: 38px; content: \"\"; } } .right { padding-left: 30%; \u0026::after { width: 0; height: 0; border-top: 6px solid transparent; border-bottom: 6px solid transparent; border-left: 6px solid rgb(149, 236, 105); position: absolute; right: 60px; top: 18px; content: \"\"; } .MessageContent { background: rgb(149, 236, 105) !important; } } .avatar { width: 66px; text-align: center; img { width: 46","date":"2023-02-06","objectID":"/electron/:8:6","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"客户端数据库 如何把应用内的业务数据持久化到用户本地磁盘上。 对于简单的数据类型来说，可以直接把它们存储在 localStorage 中，这些数据是持久化在用户磁盘上的，不会因为用户重启应用或者重装应用而丢失。 对于稍微复杂的数据类型来说，有两个选择，其一是把这类数据存储在 IndexedDB 中，与 localStorage 类似，这也是谷歌浏览器核心提供的数据持久化工具，它以 JSON 对象的方式存储数据，数据较多时，复杂的条件查询效率不佳。 第二个选择就是把数据存储在 SQLite 中，这是一个关系型数据库，天生对复杂条件查询支持良好。 ","date":"2023-02-06","objectID":"/electron/:9:0","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"安装 SQLite npm install better-sqlite3 -D 这个模块安装完成后，大概率是无法使用这个模块的，可能会碰到如下报错信息： Error: The module '...node_modules\\better-sqlite3\\build\\Release\\better_sqlite3.node' was compiled against a different Node.js version using NODE_MODULE_VERSION $XYZ. This version of Node.js requires NODE_MODULE_VERSION $ABC. Please try re-compiling or re-installing the module (for instance, using `npm rebuild` or `npm install`). 这是因为 Electron 内置的 Node.js 的版本可能与你编译原生模块使用的 Node.js 的版本不同导致的。 建议开发者使用 Electron 团队提供的 electron-rebuild 工具来完成此工作，因为 electron-rebuild 会确定 Electron 的版本号、Electron 内置的 Node.js 的版本号、以及 Node.js 使用的 ABI 的版本号，并根据这些版本号下载不同的头文件和类库。 安装 electron-rebuild： npm install electron-rebuild -D 在 package.json 中增加如下配置节（scripts配置节）： \"rebuild\": \"electron-rebuild -f -w better-sqlite3\" 在工程根目录下执行如下指令： npm run rebuild 当你的工程下出现了这个文件 node_modules/better-sqlite3/build/Release/better_sqlite3.node，才证明 better_sqlite3 模块编译成功了，如果上述指令没有帮你完成这项工作，你可以把指令配置到 node_modules/better-sqlite3 模块内部再执行一次，一般就可以编译成功了（如下图所示）。 这样就为 Electron 重新编译了一遍 better-sqlite3，现在就可以在 Electron 应用内使用 better-sqlite3 提供的 API 了。 在应用中试试如下代码（渲染进程和主进程均可，甚至在渲染进程的开发者调试工具中也没问题），看是不是可以正确创建 SQLite 的数据库。 const Database = require(\"better-sqlite3\"); const db = new Database(\"db.db\", { verbose: console.log, nativeBinding: \"./node_modules/better-sqlite3/build/Release/better_sqlite3.node\" }); 不出意外的话，工程根目录下将会创建一个名为 db.db 的 SQLite 数据库文件，说明 better-sqlite3 库已经生效了。 ","date":"2023-02-06","objectID":"/electron/:9:1","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"压缩安装包体积 better-sqlite3 是一个原生模块，原生模块是无法被 vite 编译到 JavaScript 的，那为什么还要把它安装成开发依赖呢？ 把 better-sqlite3 安装成开发依赖，在功能上没有任何问题，electron-builder 在制作安装包时，会自动为安装包附加这个依赖（better-sqlite3 这个库自己的依赖也会被正确附加到安装包内）。 但electron-builder 会把很多无用的文件（很多编译原生模块时的中间产物）也附加到安装包内。无形中增加了安装包的体积（大概 10M），如下图所示： 在 plugins/buildPlugin.ts 中增加一个方法： async prepareSqlite() { // 拷贝 better-sqlite3 const srcDir = path.join(process.cwd(), 'node_modules/better-sqlite3'); const destDir = path.join(process.cwd(), 'dist', 'node_modules/better-sqlite3'); fs.ensureDirSync(destDir); fs.copySync(srcDir, destDir, { filter: (src, dest) =\u003e { if (src.endsWith('better-sqlite3') || src.endsWith('build') || src.endsWith('Release') || src.endsWith('better_sqlite3.node')) { return true; } else return src.includes('node_modules\\\\better-sqlite3\\\\lib'); } }); let pkgJson = '{\"name\": \"better-sqlite3\",\"main\": \"lib/index.js\"}'; let pkgJsonPath = path.join(process.cwd(), 'dist', 'node_modules/better-sqlite3/package.json'); fs.writeFileSync(pkgJsonPath, pkgJson); // 制作bindings模块 const bindingPath = path.join(process.cwd(), 'dist', 'node_modules/bindings/index.js'); fs.ensureDirSync(bindingPath); const bindingsContent = `module.exports = () =\u003e { let addonPath = require(\"path\").join(__dirname, '../better-sqlite3/build/Release/better_sqlite3.node'); return require(addonPath); };`; fs.writeFileSync(bindingPath, bindingsContent); pkgJson = '{\"name\": \"bindings\",\"main\": \"index.js\"}'; pkgJsonPath = path.join(process.cwd(), 'dist', 'node_modules/bindings/package.json'); fs.writeFileSync(pkgJsonPath, pkgJson); } 这段代码主要做了两个工作： 把开发环境的 node_modules/better-sqlite3 目录下有用的文件拷贝到 dist/node_modules/better-sqlite3 目录下，并为这个模块自制了一个简单的 package.json。 完全自己制作了一个 bindings 模块，把这个模块放置在 dist/node_modules/bindings 目录下。 closeBundle 钩子函数中调用这个方法：buildObj.prepareSqlite()。 这里 bindings 模块是 better-sqlite3 模块依赖的一个模块，它的作用仅仅是确定原生模块文件 better_sqlite3.node 的路径。 接下来再修改一下 BuildObj的preparePackageJson 方法，在生成 package.json 文件之前，为其附加两个生产依赖，代码如下： localPkgJson.dependencies['better-sqlite3'] = '*'; localPkgJson.dependencies['bindings'] = '*'; 有了这两个配置，electron-builder 就不会自动安装这些模块了。 完成这些工作后，在 closeBundle 钩子函数中调用这个方法： buildObj.prepareSqlite()，再打包看看，安装包的体积是否变小了呢？ ","date":"2023-02-06","objectID":"/electron/:9:2","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"安装 Knex.js 成功引入 better-sqlite3 并且压缩了 better-sqlite3 模块在安装包的体积后，面临着另一个问题需要解决。 使用 better-sqlite3 读写数据库中的数据时，要书写 SQL 语句，这种语句是专门为数据库准备的指令，下面是为 sqlite 数据库建表和在对应表中完成增删改查的 SQL 语句： create table admin(username text,age integer); insert into admin values('allen',18); select * from admin; update admin set username='allen001',age=88 where username='allen' and age=18; delete from admin where username='allen001'; 使用 Knex.js 可以来完成对应的操作，Knex.js 允许使用 JavaScript 代码来操作数据库里的数据和表结构，它会把 JavaScript 代码转义成具体的 SQL 语句，再把 SQL 语句交给数据库处理，可以把它理解为一种 SQL Builder。 npm install knex -D 打包之前编译这个库，代码如下所示： plugins/buildPlugin.ts prepareKnex() { let pkgJsonPath = path.join(process.cwd(), 'dist', 'node_modules/knex'); fs.ensureDirSync(pkgJsonPath); require('esbuild').buildSync({ entryPoints: ['./node_modules/knex/knex.js'], bundle: true, platform: 'node', format: 'cjs', minify: true, outfile: './dist/node_modules/knex/index.js', external: ['oracledb', 'pg-query-stream', 'pg', 'sqlite3', 'tedious', 'mysql', 'mysql2', 'better-sqlite3'], }); let pkgJson = `{\"name\": \"bindings\",\"main\": \"index.js\"}`; pkgJsonPath = path.join(process.cwd(), 'dist', 'node_modules/knex/package.json'); fs.writeFileSync(pkgJsonPath, pkgJson); } 相对于压缩 better-sqlite3 的体积来说，压缩 Knex.js 包的体积就简单多了，仅仅是通过 esbuild 工具编译了一下这个包的代码就完成了工作。 这段代码有以下几点需要注意。 配置项 external 是为了避免编译过程中 esbuild 去寻找这些模块而导致编译失败，也就是说 Knex.js 中这样的代码会保持原样输出到编译产物中： require(‘better-sqlite3’)。 package.json 增加一个生产依赖：localPkgJson.dependencies[‘knex’] = ‘*’;，以避免 electron-builder 安装 Knex.js 模块。 closeBundle 钩子函数中调用这个方法：buildObj.prepareKnex()。 ","date":"2023-02-06","objectID":"/electron/:9:3","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"访问数据库 新建数据库 db，数据库中有两张表 Message 和 Chat，截图是 Chat 表的列： 数据库设计好之后，创建一个数据库访问类，由于主进程的逻辑和渲染进程的逻辑都有可能会访问数据库，所以把数据库访问类放置在 src/common 目录下，方便两个进程的逻辑代码使用这个类，代码如下： src/common/db.ts import knex, { Knex} from 'knex'; import fs from 'fs'; import path from 'path'; let dbInstance: Knex; // @ts-ignore if (!dbInstance) { let dbPath = process.env.APPDATA || `${process.env.HOME}${process.platform === 'darwin' ? '/Library/Preferences' : '/.local/share'}`; dbPath = path.join(dbPath, 'Electron'); const dbIsExist = fs.existsSync(dbPath); if (!dbIsExist) { console.log(process.execPath) const resourceDbPath = path.join(process.execPath, '../resources/db.db'); fs.copyFileSync(resourceDbPath, dbPath); } dbInstance = knex({ client: 'better-sqlite3', connection: { filename: dbPath }, useNullAsDefault: true, }) } export let db = dbInstance; 导出一个数据库访问对象，只有第一次引入这个数据库访问对象的时候才会执行此对象的初始化逻辑，无论在多少个组件中引入这个数据库访问对象，它只会被初始化一次，但这个约束只局限在一个进程内，也就是说对于整个应用而言，主进程有一个 db 实例，渲染进程也有一个 db 实例，两个实例是完全不同的。 由于渲染进程内的数据库访问对象和主进程内的数据库访问对象不是同一个对象，所以会有并发写入数据的问题，需要控制好你的业务逻辑，避免两个进程在同一时间写入相同的业务数据。 SQLite 不支持并发写入数据，两个或两个以上的写入操作同时执行时，只有一个写操作可以成功执行，其他写操作会失败。并发读取数据没有问题。 第一次初始化数据库链接对象时，会检查 MacintoshHD/用户/[yourOsUserName]/资源库/ApplicationSupport/[yourAppName]/db.db 文件是否存在，如果不存在，就从应用程序安装目录 MacintoshHD/用户/[yourOsUserName]/资源库/ApplicationSupport/[yourAppName]/resources/db.db 拷贝一份到该路径下，所以要提前把数据库设计好，基础数据也要初始化好，制作安装包的时候，把数据库文件打包到安装包里。 通过为 plugins/buildPlugin.ts 增加配置来把数据库文件打包到安装包内的，其中关键的配置代码如下所示： // buildInstaller 方法内 option.config 的一个属性 extraResources: [{ from: `./src/common/db.db`, to: `./` }] extraResources 可以让开发者为安装包指定额外的资源文件，electron-builder 打包应用时会把这些资源文件附加到安装包内，当用户安装应用程序时，这些资源会释放在安装目录的 resources/子目录下。 为什么要把数据库文件拷贝再访问，不直接访问安装目录下的数据库文件呢？ 因为当用户升级应用程序时安装目录下的文件都会被删除，因为可能会在数据库中放置很多用户数据，这样的话每次升级应用用户这些数据就都没了。 假定数据库是整个应用的核心组件，没有它，数据库应用程序无法正常运行，所以初始化数据库的逻辑都是同步操作（fs.copyFileSync），注意这类以 Sync 结尾的方法都是同步操作，它们是会阻塞 JavaScript 的执行线程的，也就是说在它们执行过程中，其他任何操作都会处于阻塞状态。 在应用程序开发调试阶段，开发者可以先把设计好的数据库文件放置在目标路径 MacintoshHD/用户/[yourOsUserName]/资源库/ApplicationSupport/[yourAppName] 下。 db.ts 文件导出的是一个 Knex 类型的对象，初始化这个对象时，传入一个配置对象，配置对象的 client 属性代表着使用什么模块访问数据库，这里要求 Knex 使用 better-sqlite3 访问数据库，Knex 支持很多数据库，比如 MySql、Oracle、SqlServer 等，都有对应的数据库访问模块。 由于 SQLite 是一个客户端数据库，所以只要把数据库的本地路径告知 Knex 即可，这个属性是通过配置对象的 connection 属性提供的。配置对象的 useNullAsDefault 属性告知 Knex 把开发者未明确提供的数据配置为 Null。 接下来尝试使用这个数据库访问对象把 Chat 表的数据检索出来，代码如下所示： src/renderer/main.ts import { db } from \"../common/db\"; db(\"Chat\") .first() .then((obj) =\u003e { console.log(obj); }); 首先创建一个数据库连接对象 db，接着使用这个对象读取 Chat 表里的第一行记录，数据读取成功后把这行数据打印到控制台。 ","date":"2023-02-06","objectID":"/electron/:9:4","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"数据库基本操作 增加数据 增加一条数据： src/renderer/window/WindowMain/Contact.vue const insertData = async () =\u003e { let model = new ModelChat(); model.fromName = \"聊天对象\"; model.sendTime = Date.now(); model.lastMsg = \"这是此会话的最后一条消息\"; model.avatar = `https://pic3.zhimg.com/v2-306cd8f07a20cba46873209739c6395d_im.jpg?source=32738c0c`; await db(\"Chat\").insert(model); }; 如果要在同一张表中增加多行数据，那么可以直接把一个数组提交给数据库： const insertMultiData = async () =\u003e { let result = []; for (let i = 0; i \u003c 10; i++) { let model = new ModelChat(); model.fromName = \"聊天对象\" + i; model.sendTime = Date.now(); model.lastMsg = \"这是此会话的最后一条消息\" + i; model.avatar = `https://pic3.zhimg.com/v2-306cd8f07a20cba46873209739c6395d_im.jpg?source=32738c0c`; result.push(model); } result[5].isSelected = true; await db(\"Chat\").insert(result); }; 查询数据 const selectData = async () =\u003e { let data = await db(\"Chat\").where({ id: `256d6532-fcfe-4b81-a3f8-ee940f2de3e3` }).first(); console.log(data); }; 修改数据 const updateData = async () =\u003e { let data = await db(\"Chat\").update({ fromName: \"三岛由纪夫\", lastMsg: \"就在刀刃猛然刺入腹部的瞬间，一轮红日在眼睑背面粲然升了上来。\" }).where({ id: `256d6532-fcfe-4b81-a3f8-ee940f2de3e3` }); console.log(data); }; 需要使用 where 方法确定更新范围，不然整个表的数据都将被修改 (数据库操作返回的值 data 为受影响的行数) 。 删除数据 let deleteData = async () =\u003e { let data = await db(\"Chat\").where({ id: `256d6532-fcfe-4b81-a3f8-ee940f2de3e3` }).delete(); console.log(data); }; 需要使用 where 方法确定删除范围，不然整个表的数据都将被删除（数据库操作返回的值 data 为受影响的行数）。 事务 数据库的事务是一个操作序列，包含了一组数据库操作指令。 事务把这组指令作为一个整体向数据库提交操作请求，这一组数据库命令要么都执行，要么都不执行，是一个不可分割的工作逻辑单元。 const transaction = async () =\u003e { try { await db.transaction(async (trx) =\u003e { let chat = new ModelChat(); chat.fromName = \"聊天对象aaa\"; chat.sendTime = Date.now(); chat.lastMsg = \"这是此会话的最后一条消息\"; chat.avatar = `https://pic3.zhimg.com/v2-306cd8f07a20cba46873209739c6395d_im.jpg?source=32738c0c`; await trx(\"Chat\").insert(chat); // throw \"throw a error\"; let message = new ModelMessage(); message.fromName = \"聊天对象\"; message.chatId = chat.id; message.createTime = Date.now(); message.isInMsg = true; message.messageContent = \"这是我发给你的消息\"; message.receiveTime = Date.now(); message.avatar = `https://pic3.zhimg.com/v2-306cd8f07a20cba46873209739c6395d_im.jpg?source=32738c0c`; await trx(\"Message\").insert(message); }); } catch (error) { console.error(error); } }; 把两个插入操作封装到了一个事务中，两个插入操作要么都成功执行，要么一个也不执行，可以把 throw “throw a error” 语句取消注释，观察一下数据库的数据更新情况。 db.transaction 方法的回调函数中 trx 就是 Knex 封装的数据库事务对象。 分页查询 分页从数据库中获取数据。 import { ref, Ref } from 'vue'; // 当前是第几页 let currentPageIndex: Ref\u003cnumber\u003e = ref(0); // 每页数据行数 let rowCountPerPage: Ref\u003cnumber\u003e = ref(6); // 总页数 let pageCount: Ref\u003cnumber\u003e = ref(-1); // 获取某一页数据 const getOnePageData = async () =\u003e { let data = await db('Chat') .orderBy('sendTime', 'desc') .offset(currentPageIndex.value * rowCountPerPage.value) .limit(rowCountPerPage.value); console.log(data); } // 获取第一页数据 const getFirstPage = async () =\u003e { if (pageCount.value === -1) { // @ts-ignore let { count } = await db('Chat').count('id as count').first(); count = count as number; pageCount.value = count / rowCountPerPage.value as number; } currentPageIndex.value = 0; await getOnePageData(); } // 获取下一页数据 const getNextPage = async () =\u003e { currentPageIndex.value = currentPageIndex.value + 1 \u003e= pageCount.value ? Math.ceil(pageCount.value) - 1 : currentPageIndex.value + 1; await getOnePageData(); } // 获取上一页数据 const getPrevPage = async () =\u003e { currentPageIndex.value = currentPageIndex.value - 1 \u003c 0 ? 0 : currentPageIndex.value - 1; await getOnePageData(); } // 获取最后一页数据 const getLastPage = async () =\u003e { currentPageIndex.value = Math.ceil(pageCount.value) - 1; await getOnePageData(); } 获取第一页数据时，初始化总页数和当前页码数，总页数是通过数据库中的总行数除以每页行数得到的，这个值有可能包含小数部分。当前页码数是从零开始的整数。第一页时，它的值为 0。 获取下一页数据时，判断当前页码数是不是到达了最后一页，如果没有，那么就把当前页码数加 1，考虑到总页数存在小数的可能，所以最后一页的当前页码数应为：Math.ceil(pageCount) - 1。Math.ceil() 函数返回大于或等于一个给定数字的最小整数。 Math.ceil(6.11) 的结果为 7，Math.ceil(6) 的结果为 6。 获取上一页数据时，判断当前页码数是不是小于 0，如果是，就把当前页码数置为 0，如果不是就把当前页码数减一。 获取最后一页数据时，把当前页码数置为 Math.ceil(pageCount) - 1 即可。 每次获取数据都调用 getOnePageData 方法。这个方法中","date":"2023-02-06","objectID":"/electron/:9:5","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"开发原生模块 Node.js 允许开发者使用 C、C++ 等语言开发原生模块。并且遵循此方案开发出的原生模块可以像普通的 Node.js 模块一样通过 require() 函数加载，并使用 JavaScript 访问模块提供的 API。 Node.js 具备原生模块的能力还有以下原因： 性能提升： JavaScript 是解释型语言，相对于系统级语言来说性能上还是略有不足。 节约成本：有很多现成的 C/C++ 项目，在 Node.js 项目中直接复用这些项目可以节约很多开发成本。 能力拓展：Node.js 不是万能的，需要 C/C++ 的能力来辅助完成。 如何在 Electron 应用中使用原生模块？ ","date":"2023-02-06","objectID":"/electron/:10:0","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"搭建开发环境 一种方式是通过 Node-API 开发原生模块，Node-API 是专门用于构建原生模块，它独立于底层 JavaScript 运行时，并作为 Node.js 的一部分进行维护。 它是跨 Node.js 版本的应用程序二进制接口（Application Binary Interface，ABI），旨在将原生模块与底层实现隔离开，并允许为某个 Node.js 版本编译的模块在更高版本的 Node.js 上运行而无需重新编译。 不同版本的 Node.js 使用同样的接口为原生模块提供服务，这些接口是 ABI 化的，只要 ABI 的版本号一致，编译好的原生模块就可以直接使用，不需要重新编译。 基于 Node-API 开发原生模块仍存在两种方式。 一种方式就是使用 C 语言开发，由于 Node-API 就是用 C 语言封装的，所以这种方法更为直接，由于 C 语言过于简单直接，语言特性较少，所以开发起来非常麻烦。 另一种方式是基于 node-addon-api 使用 C++ 语言开发，node-addon-api 项目是对 Node-API 的 C++ 再包装，这种方式可以精简很多代码。 全局安装 node-gyp 工具，它是专门为构建开发、编译原生模块环境而生的跨平台命令行工具。 npm install -g node-gyp 新建一个 Node.js 项目，安装 node-addon-api: src 目录下新建文件夹 native。 初始化 Node.js 项目： npm init -y npm install node-addon-api 创建原生模块配置文件 binding.gyp: { \"targets\": [ { \"cflags!\": [\"-fno-exceptions\"], \"cflags_cc!\": [\"-fno-exceptions\"], \"defines\": [\"NAPI_DISABLE_CPP_EXCEPTIONS\"], \"target_name\": \"addon\", \"include_dirs\": [\"\u003c!(node -p \\\"require('node-addon-api').include_dir\\\")\"], \"sources\": [\"export.cc\"], \"conditions\": [ [ 'OS==\"mac\"', { \"sources\": [\"clipboard.mm\"], \"link_settings\": { \"libraries\": [\"-framework Cocoa\", \"-framework CoreFoundation\"] }, \"xcode_settings\": { \"GCC_ENABLE_CPP_EXCEPTIONS\": \"YES\", \"CLANG_ENABLE_OBJC_ARC\": \"YES\", \"OTHER_CFLAGS\": [\"-ObjC++\", \"-std=c++17\"] } } ], [ 'OS==\"win\"', { \"sources\": [\"clipboard.cc\"], \"libraries\": [\"Shlwapi.lib\", \"Shcore.lib\"], \"msvs_settings\": { \"VCCLCompilerTool\": { \"AdditionalOptions\": [\"/std:c++17\"] } } } ] ] } ] } include_dirs 配置 node-addon-api 项目提供的 C++ 头文件所在路径。 defines、cflags_cc!、 cflags!起到禁用 C++ 异常的作用（注意，如果选择禁用 C++ 异常，那么 node-addon-api 框架将不再为开发者处理异常，需要自己检查异常）。 sources 指向这个原生模块的入口文件。 target_name 为原生模块的名称。 ","date":"2023-02-06","objectID":"/electron/:10:1","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"读取剪切板文件路径 Electron 公开的剪切板 API 是无法读取剪切板内多个文件的路径的，开发一个原生模块来补全 Electron 在这方面的不足。 创建原生模块的入口文件： src/native/export.cc #include \u003cnapi.h\u003e #include \u003ctuple\u003e #include \"clipboard.h\" Napi::Array ReadFilePathsJs(const Napi::CallbackInfo \u0026info) { auto env = info.Env(); const auto file_paths = ReadFilePaths(); auto result = Napi::Array::New(env, file_paths.size()); for (size_t i = 0; i != file_paths.size(); ++i) { result.Set(i, file_paths[i]); } return result; } Napi::Object Init(Napi::Env env, Napi::Object exports) { exports.Set(\"readFilePaths\", Napi::Function::New(env, ReadFilePathsJs)); return exports; } NODE_API_MODULE(NODE_GYP_MODULE_NAME, Init); NODE_API_MODULE 定义此原生模块的入口函数，一旦 Node.js 加载该模块时，将执行 Init 方法，NODE_GYP_MODULE_NAME 宏展开后为编译配置文件 binding.gyp 中的 target_name。 Init 方法是这个模块的入口函数，这个函数包含两个参数，第一个是 JavaScript 运行时环境对象，第二个是模块的导出对象（也就是 module.exports），给这个对象设置属性，以导出想要暴露给外部的内容，此处导出了 ReadFilePathsJs 方法，当外部调用此方法时，将执行 ReadFilePathsJs 函数。入口函数退出时应把 exports 对象返回给调用方。 ReadFilePathsJs 方法执行时调用方会传入一个 CallbackInfo 类型的参数，它是一个由 Node.js 传入的对象，该对象包含 JavaScript 调用此方法时的输入参数，可以通过这个对象的 Env 方法获取 JavaScript 运行时环境对象。 ReadFilePathsJs 方法内，调用了 ReadFilePaths 方法，这个方法在 clipboard.h 中定义，它返回一个字符串容器（std::vectorstd::string类型），这个容器中的内容就是剪切板内的文件路径。 把这个容器中的内容逐一复制到一个数组中（Napi::Array 类型，这个类型可以直接被 JavaScript 访问），最后把这个数组返回给调用者。 定义 clipboard.h 头文件内容: src/native/clipboard.h #ifndef CLIPBOARD_H #define CLIPBOARD_H #include \u003cvector\u003e #include \u003cstring\u003e std::vector\u003cstd::string\u003e ReadFilePaths(); #endif 定义方法：ReadFilePaths，在不同平台下读取剪切板的实现逻辑不同，所以要为这个头文件完成两个实现逻辑。clipboard.cc 是 Windows 平台上的实现。clipboard.mm 是 Mac 平台上的实现逻辑。 Windows 平台上的实现逻辑： src/native/clipboard.cc #include \u003cWindows.h\u003e #include \u003cShlObj.h\u003e #include \u003cmemory\u003e #include \"clipboard.h\" // 宽字符串转UTF8字符串 std::string Utf16CStringToUtf8String(LPCWSTR input, UINT len) { int target_len = WideCharToMultiByte(CP_UTF8, 0, input, len, NULL, 0, NULL, NULL); std::string result(target_len, '\\0'); WideCharToMultiByte(CP_UTF8, 0, input, len, result.data(), target_len, NULL, NULL); return result; } // RAII（Resource Acquisition Is Initialization）类 class ClipboardScope { bool valid; public: ClipboardScope() { valid = static_cast\u003cbool\u003e(OpenClipboard(NULL)); } ~ClipboardScope() { CloseClipboard(); } bool IsValid() { return valid; } }; //读取剪切板内的文件路径 std::vector\u003cstd::string\u003e ReadFilePaths() { auto result = std::vector\u003cstd::string\u003e(); ClipboardScope clipboard_scope; if (!clipboard_scope.IsValid()) { return result; } HDROP drop_files_handle = (HDROP)GetClipboardData(CF_HDROP); if (!drop_files_handle) { return result; } UINT file_count = DragQueryFileW(drop_files_handle, 0xFFFFFFFF, NULL, 0); result.reserve(file_count); for (UINT i = 0; i \u003c file_count; ++i) { UINT path_len = DragQueryFileW(drop_files_handle, i, NULL, 0); UINT buffer_len = path_len + 1; std::unique_ptr\u003cWCHAR[]\u003e buffer(new WCHAR[buffer_len]); path_len = DragQueryFileW(drop_files_handle, i, buffer.get(), buffer_len); result.emplace_back(Utf16CStringToUtf8String(buffer.get(), path_len)); } return result; } OpenClipboard 之后要对应的关闭操作 CloseClipboard，把这两个操作封装到了一个对象中：clipboard_scope，这个对象初始化时，执行 OpenClipboard 操作，对象释放时，执行 CloseClipboard 操作，这是使用 C++ 开发常见的 RAII（Resource Acquisition Is Initialization）开发技巧。 通过 Windows API 获取到的文件路径是宽字节字符串，需要把这个字符串转化成 UTF8 格式的字符串才能被 JavaScript 使用，上述代码中 Utf16CStringToUtf8String 方法就是完成这个任务的。 如果剪切板内没有文件路径，就返回一个空容器，如果有文件路径，就把所有的文件路径都放置到容器中返回给调用者。 Mac 平台上的实现逻辑： src/native/clipboard.mm #import \u003cFoundation/Foundation.h\u003e #import \u003cCocoa/Cocoa.h\u003e #include \"clipboard.h\" std::vector\u003cstd::string\u003e ReadFilePaths() { NSPasteboard *pasteboard = [NSPasteboard generalPasteboard]; NSArray\u003cNSURL *\u003e *urls = [pasteboard readObjectsForClasses:@[NSURL.class] options:@{ NSPasteboardURLReadingFileURLsOnlyKey: @YES, }]; if (!urls) { return {}; } auto result = std::vector\u003cstd::string\u003e(); result.reserve(urls.count); for (NSURL *url in urls) { result.emplace_back([url.path UTF8String]); } return result; } ","date":"2023-02-06","objectID":"/electron/:10:2","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"编译原生模块 如何实现在 Windows 环境下，编译 src/native/clipboard.cc 源码，在 Mac 环境下编译 src/native/clipboard.mm？ 编译配置文件：src/native/binding.gyp 最后一个配置节提供了配置能力。这个配置节的作用是在操作系统不同时（‘OS==“mac”’），指定不同的源码文件（sources）、依赖库（libraries）和编译工具（msvs_settings、xcode_settings）。 现在执行如下指令来生成构建工程： node-gyp configure 构建好工程之后，尝试使用如下命令来编译这个原生模块。 node-gyp build 如果在命令行环境中看到彩色的 gyp info ok 这行信息，说明原生模块已经编译成功了，它被放置在 build/Release/addon.node 路径下。 接下来写一段 JavaScript 代码，测试一下这个原生模块。 //src\\native\\test.js let native = require(\"./build/Release/addon.node\"); let paths = native.readFilePaths(); console.log(paths); 先复制几个文件，然后使用如下命令执行这个测试脚本： node test.js 看看你复制的文件路径是不是已经打印到控制台上了呢？ 上面编译出的原生模块不一定能在 Electron 应用中正常工作。这是因为 Electron 内置的 Node.js 的版本可能与你编译原生模块使用的 Node.js 的版本不同。如果在 Electron 工程内使用原生模块时，碰到如下错误： Error: The module '/path/to/native/module.node' was compiled against a different Node.js version using NODE_MODULE_VERSION $XYZ. This version of Node.js requires NODE_MODULE_VERSION $ABC. Please try re-compiling or re-installing the module (for instance, using `npm rebuild` or `npm install`). 则说明你使用的原生模块与 Electron 的 ABI 不匹配，此时就要针对 Electron 内置的 ABI 来编译你的原生模块。 使用方法与编译 SQLite 原生模块时相同，如下指令所示： electron-rebuild -f -m ./src/native 现在编译出的原生模块就可以在 Electron 工程下正常使用了。 ","date":"2023-02-06","objectID":"/electron/:10:3","tags":["连载","第一技能"],"title":"基于 Electron + Vue3 的桌面应用开发实战","uri":"/electron/"},{"categories":["碎碎念"],"content":"2023-02 ","date":"2023-02-05","objectID":"/2023/:1:0","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"02-01 ","date":"2023-02-05","objectID":"/2023/:1:1","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"02-02 Damn cool!!! ","date":"2023-02-05","objectID":"/2023/:1:2","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"02-03 node.js 还是挺有意思的。 ","date":"2023-02-05","objectID":"/2023/:1:3","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"02-04 😠 无知和过度的商业宣传形成了健康问题必然危机生命的大众认知，从维持生命的人性底层上滋生了心理层面的恐慌，驱动了盲目的就医行动。 ","date":"2023-02-05","objectID":"/2023/:1:4","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"02-05 😜 轻断食前的最后一顿大餐。 ","date":"2023-02-05","objectID":"/2023/:1:5","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"02-06 He deserved it. ","date":"2023-02-05","objectID":"/2023/:1:6","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"2023-01 ","date":"2023-02-05","objectID":"/2023/:2:0","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-01 去成都SKP逛一圈，才能知道自己有多穷😭 ","date":"2023-02-05","objectID":"/2023/:2:1","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-02 乔妹的演技还是可以，一口气追完了，期待第二季😄 ","date":"2023-02-05","objectID":"/2023/:2:2","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-03 ","date":"2023-02-05","objectID":"/2023/:2:3","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-04 读文学经典以来最大的感受是：慢慢看淡生与死。 ","date":"2023-02-05","objectID":"/2023/:2:4","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-05 做前端死路一条，后端也是。 ","date":"2023-02-05","objectID":"/2023/:2:5","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-06 或许曾经我们都想自己是齐天大圣，可长大后才发现，其实我们都只是一只努力生存的小猪妖。 ","date":"2023-02-05","objectID":"/2023/:2:6","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-07 不好好看文档系列😭。。包子都吃完了，才看到要按照顺序吃，可惜肚子吃不下了，不然再来一笼。 好想知道如果这样吃，会不会让灵魂得到升华🤔。 ","date":"2023-02-05","objectID":"/2023/:2:7","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-08 在飞机上看了《一条狗的使命2》，哭得稀里哗啦的😭。 多希望饼干🐱也可以一直历经生死轮回找到我并陪伴着我，直到我走到生命的终点。 ","date":"2023-02-05","objectID":"/2023/:2:8","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-09 犹豫了很久很久，终于下定决心入手 AJ 扣碎篮板😍。 钱不花就是一张纸，花了才是钱😳。 ","date":"2023-02-05","objectID":"/2023/:2:9","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-10 公司产品总监为了拍老板🐴屁，东西还没做完就着急给老板👁，然后白屏了，🦷都笑掉了。 ","date":"2023-02-05","objectID":"/2023/:2:10","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-11 闺蜜失恋了，被迫听了3个小时的她和她前男友的爱情故事🤕。 ","date":"2023-02-05","objectID":"/2023/:2:11","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-12 原来妈妈也喜欢听你给她讲在外面遇到的新鲜事儿😊。 ","date":"2023-02-05","objectID":"/2023/:2:12","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-13 塔勒布说过：“21世纪有三大毒品：海洛因、碳水化合物、每月发一次的工资。” ","date":"2023-02-05","objectID":"/2023/:2:13","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-14 直发回来的那一刻，如释重负😊。 ","date":"2023-02-05","objectID":"/2023/:2:14","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-15 😴😴😴 ","date":"2023-02-05","objectID":"/2023/:2:15","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-16 打扫卫生。 ","date":"2023-02-05","objectID":"/2023/:2:16","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-17 世界上怎么会有IU这么可爱的👧🏻。 ","date":"2023-02-05","objectID":"/2023/:2:17","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-18 重温《德鲁纳酒店》，每个人看似理智又冷静，但其实内心也有着最脆弱的一面，没有了依靠时，只能用坚强来掩盖自己的脆弱。 ","date":"2023-02-05","objectID":"/2023/:2:18","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-19 彩妆的尽头是裸妆 烫发的尽头是黑长直 美甲的尽头是肉粉色 医美的尽头是养生 消费主义的尽头是断舍离 道理的尽头是大道至简 万事的尽头是尽人事听天命 人生的尽头是一个人面对孤独 ","date":"2023-02-05","objectID":"/2023/:2:19","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-20 🤔发现一个挺有意思的事情，因为要回老家过年，给🐱准备了两个猫砂盆，这家伙竟然自己主动分类了，一个专门用来💧，一个专门用来💩。 ","date":"2023-02-05","objectID":"/2023/:2:20","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-21 新年快乐鸭🎆。 ","date":"2023-02-05","objectID":"/2023/:2:21","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-22 🥰的一天，老弟给买了烤鸡和🧋，陪爸爸妈妈一起看📺。 ","date":"2023-02-05","objectID":"/2023/:2:22","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-23 飞扬的👖。 ","date":"2023-02-05","objectID":"/2023/:2:23","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-24 4个人一起喝🍺，吐了1个，晕了2个。 ","date":"2023-02-05","objectID":"/2023/:2:24","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-25 ","date":"2023-02-05","objectID":"/2023/:2:25","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-26 I am sorry MJ… it’s 2023 and the world is still cruel. ","date":"2023-02-05","objectID":"/2023/:2:26","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-27 在🚄上读《解忧杂货店》，要是世界上真的有一家这样的店就好了。 ","date":"2023-02-05","objectID":"/2023/:2:27","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-28 上班第一天，😴。 ","date":"2023-02-05","objectID":"/2023/:2:28","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-29 😠。 ","date":"2023-02-05","objectID":"/2023/:2:29","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-30 一本书，可以折射一个小世界，也可以成为一部分人的朋友。 ","date":"2023-02-05","objectID":"/2023/:2:30","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-31 被公司的 UI 折磨惨了😭。 ","date":"2023-02-05","objectID":"/2023/:2:31","tags":["连载","碎碎念"],"title":"Q 的乱语 - 2023年","uri":"/2023/"},{"categories":["读书"],"content":"001 长期主义 ","date":"2023-02-02","objectID":"/books/:1:0","tags":["读书"],"title":"Q 的读书计划 - 2023年","uri":"/books/"},{"categories":["读书"],"content":"002 解忧杂货店 ","date":"2023-02-02","objectID":"/books/:2:0","tags":["读书"],"title":"Q 的读书计划 - 2023年","uri":"/books/"},{"categories":["读书"],"content":"003 生活蒙太奇 ","date":"2023-02-02","objectID":"/books/:3:0","tags":["读书"],"title":"Q 的读书计划 - 2023年","uri":"/books/"},{"categories":["谈人生"],"content":"房屋租赁纠纷引发的思考 简述一下事情的起因，因为工作变动，没有太多时间找房子，在贝壳找房上紧急租到了套一公寓，和中介公司签订了半年的租房合同，签订合同前，凭借着自己那点可怜的人生经验觉得合同好像没什么问题，就痛快地签了。 (注：合同的甲方写的是房东的名字，涉及个人隐私部分打码)。 也怪自己租房前没仔细检查，搬进来之后发现电器有一些小问题，比如客厅灯不亮这些，想着也没有太大影响，反正只租了半年，到期后肯定不租了，就先凑合住吧，就这样相安无事地住了3个月。 今年1月份忽然被告知中介公司与房东合约到期（实际是公司经营不善决定退租(：房东说的，真假无从考证），并且双方在没有告知我的情况下已经完成了手续移交。 首先沟通的是宽带问题，因为之前要每个月给中介公司交200元杂费，其中包括物业费、宽带等之类的费用，现在中介公司不管了，宽带我肯定是要用的，遂找到房东，房东让我找中介公司，中介公司让我找房东（相互踢皮球）。以下是聊天记录： 和房东沟通： 和中介沟通： 房东让找中介，中介选择沉默，最后这件事情不了了之，没办法，自己装个宽带吧。。。害。 过节回来后，又有麻烦了，窗户的锁因为老旧坏掉了，大冬天太冷了，冻了3天之后，实在忍不了了，因为我对周围环境也不熟悉，想着联系下房东帮忙给处理下，然后就发生了不愉快的事情，房东勒令我立马搬出去，中介还是一如既往地踢皮球，还报了警，民警来了只是问了问，给了点建议，说他们管不了，然后就走了。 和房东沟通： 和中介沟通： 中间还给房东打了电话，房东说自己是70岁+的退休国家干部，已经实现了财务自由，言语中透露出浓浓地官僚资本主义，所以不在乎房子租不租的出去，只是怕麻烦，喊我如果想继续住下去，就每个月只按时给她房租，其余的事情全部自己来解决。 最后这件事情，肯定是自己掏钱把锁修好了。自己可能还是太年轻吧，言语中充满了愤愤不平和对当今这个社会的失望。冷静下来之后，研究了下租房合同、他们的交接协议、以及这段时间和他们的沟通记录： 首先：甲乙（甲：房东，乙：中介公司）双方于1月15日进行房子交割协议，中介公司将押金和15日之后的房租交给了房东，是不是就说明这个房子和中介公司没有关系了，以后房子的事情都由房东自己来处理（作为房东出租房屋应该有责任要处理房子硬件设施老化维护的问题）。 其次：中介公司未提前与我进行沟通，这种情况是不是处理太不恰当，并应该有义务对之后的纠纷进行协调处理。 附上一篇从网上找到的相关报道，虽然我目前的状况还没有这个人的这么严重… 我的朋友，你怎么看待这件事情呢？期待收获您的宝贵经验。 更新： 几位朋友给出了自己的建议。 “你可以找人问问合同的履行人现在是公司还是房东，but都很麻烦，走警察都是劝诫为主，走法院半年起步。” “这事只能吃哑巴亏，自己认倒霉。” “那你直接跟这个房东补签一个三个月的短租合同好了看她同不同意。” “你就说她让你搬出去也得把之前的押金退给你，然后你搬出去了再到她找到新房客中间少说也要一个多星期两个星期房子是空着的，她自己是有损失的，谁也不会跟钱过不去。” so，这房子到期就 👋🏻 吧 👵🏻，等待下一个倒霉 🥚 入坑。 ","date":"2023-02-01","objectID":"/blog/:1:0","tags":["谈人生"],"title":"Q 的倒霉蛋系列 - 2023年","uri":"/blog/"},{"categories":["第二技能"],"content":"项目地址： learningC- ","date":"2023-01-22","objectID":"/c-/:0:0","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["第二技能"],"content":"VSCode C++ 环境配置 ","date":"2023-01-22","objectID":"/c-/:1:0","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["第二技能"],"content":"VSCode 下载 官网下载 Visual Studio Code ","date":"2023-01-22","objectID":"/c-/:1:1","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["第二技能"],"content":"扩展包安装 C/C++ CodeLLDB ","date":"2023-01-22","objectID":"/c-/:1:2","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["第二技能"],"content":"环境配置 新建 main.cpp 文件，输入以下代码： #include \u003ciostream\u003e int main() { std::cout \u003c\u003c \"hello world\" \u003c\u003c std::endl; char c = std::getchar(); return 0; } 点击运行调试，选择 C++ (GDB/LLDB) 选择 g++ 生成和调试活动文件 在 .vscode 中会生成两个文件，对这两个文件进行配置： launch.json { // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"lldb\", \"request\": \"launch\", \"name\": \"C++ debug\", \"program\": \"${fileDirname}/${fileBasenameNoExtension}\", \"args\": [], \"cwd\": \"${workspaceFolder}\", \"preLaunchTask\": \"C/C++: g++ 生成活动文件\" } ] } tasks.json { \"tasks\": [ { \"type\": \"cppbuild\", \"label\": \"C/C++: g++ 生成活动文件\", \"command\": \"/usr/bin/g++\", \"args\": [ \"-std=c++17\", \"-stdlib=libc++\", \"-fdiagnostics-color=always\", \"-g\", \"-Wall\", \"${file}\", \"-o\", \"${fileDirname}/${fileBasenameNoExtension}\" ], \"options\": { \"cwd\": \"${fileDirname}\" }, \"problemMatcher\": [ \"$gcc\" ], \"group\": { \"kind\": \"build\", \"isDefault\": true }, \"detail\": \"调试器生成的任务。\" } ], \"version\": \"2.0.0\" } 至此，C++ 环境配置完成。 运行项目，输出结果： ","date":"2023-01-22","objectID":"/c-/:1:3","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["第二技能"],"content":"包含目录和依赖项 在 C++ 程序中包含两种文件：头文件 (.h) 和源码文件 (.cpp)，一个业务单元 (比如 a.h 和 a.cpp)，头文件负责定义类型、方法和变量，源码文件则负责实现类型、方法和为变量赋值。 源码文件为了实现头文件中定义的内容，需要通过如下方式引入头文件： #include \"a.h\" 想在 a 业务单元中引入 b 业务单元定义的内容，也需要通过 include 方式引入： #include \"bHeaderFilePath/b.h\" 可以在 a.h 中引入 b 的头文件，也可以在 a.cpp 中引入 b 的头文件。 如果是在 a.h 中引入了 b 的头文件，则 a.h 和 a.cpp 都可以使用 b 的头文件中定义的内容。 如果只在 a.cpp 中引入了 b 的头文件，则只能在 a.cpp 中使用 b 的头文件中定义的内容。 如果引入操作系统 SDK 提供的头文件或标准库提供的头文件，则不用写明头文件的相对路径，但需要用尖括号包裹。 #include \u003ciostream\u003e //这个头文件没有.h扩展名 #include \u003cwindows.h\u003e ","date":"2023-01-22","objectID":"/c-/:2:0","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["乱涂乱画"],"content":"001 窗台上的🐱 下辈子做一只猫，翘着尾巴云游天下，跟狗打架。 ","date":"2023-01-19","objectID":"/draw/:1:0","tags":["连载","乱涂乱画"],"title":"Q 的油画棒画计划 - 2023年","uri":"/draw/"},{"categories":["乱涂乱画"],"content":"002 🐳与☁️ 热爱漫无边际，生活自有分寸。 ","date":"2023-01-19","objectID":"/draw/:2:0","tags":["连载","乱涂乱画"],"title":"Q 的油画棒画计划 - 2023年","uri":"/draw/"},{"categories":["乱涂乱画"],"content":"003 露营⛺️ 一起去露营吧，揽星河入怀，拥山野而眠。 ","date":"2023-01-19","objectID":"/draw/:3:0","tags":["连载","乱涂乱画"],"title":"Q 的油画棒画计划 - 2023年","uri":"/draw/"},{"categories":["乱涂乱画"],"content":"004 福🐰贺春 新年快乐。 ","date":"2023-01-19","objectID":"/draw/:4:0","tags":["连载","乱涂乱画"],"title":"Q 的油画棒画计划 - 2023年","uri":"/draw/"},{"categories":["碎碎念"],"content":"2022-12 ","date":"2022-12-11","objectID":"/2022/:1:0","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-01 钱都起床了，你还不起。 ","date":"2022-12-11","objectID":"/2022/:1:1","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-02 坚持每周中强度运动150分钟/高强度运动70分钟，可以获得一个漂亮的大海马体。 ","date":"2022-12-11","objectID":"/2022/:1:2","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-03 人可以平庸，但不能踩着人往上，也不能通过贬低和否定他人，来实现自己的价值。 ","date":"2022-12-11","objectID":"/2022/:1:3","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-04 被欲望蒙蔽双眼的人，往往分不清眼前的是食物还是诱饵。 ","date":"2022-12-11","objectID":"/2022/:1:4","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-05 这支球队就像一个平凡努力的普通人的一生。他不是最强最出彩的，但你想赢他也不容易，因为他有强大的定力和拼劲，打不倒压不垮，还能绝处逢生。 ","date":"2022-12-11","objectID":"/2022/:1:5","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-06 不到最后一刻，都不算真正结束。 ","date":"2022-12-11","objectID":"/2022/:1:6","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-07 你知道养劳工为什么不能让他们不愁吃穿吗？因为他们会以为自己才是主人。 ","date":"2022-12-11","objectID":"/2022/:1:7","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-08 公司有人🐑了。。。 ","date":"2022-12-11","objectID":"/2022/:1:8","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-09 神🐱压中了🇭🇷 ","date":"2022-12-11","objectID":"/2022/:1:9","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-10 公司后端写的烂接口，一个都不能用，就混吧 ","date":"2022-12-11","objectID":"/2022/:1:10","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-11 《纸房子·第二季》 “纸房子是人民的！” 小红猪里裂开的都是💰啊。。 ","date":"2022-12-11","objectID":"/2022/:1:11","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-12 🥶🥶🥶 ","date":"2022-12-11","objectID":"/2022/:1:12","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-13 嗓子冒烟了。 ","date":"2022-12-11","objectID":"/2022/:1:13","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-14 🐑了。 ","date":"2022-12-11","objectID":"/2022/:1:14","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-15 发烧中。 ","date":"2022-12-11","objectID":"/2022/:1:15","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-16 发烧中。 ","date":"2022-12-11","objectID":"/2022/:1:16","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-17 发烧中。 ","date":"2022-12-11","objectID":"/2022/:1:17","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-18 和饼干一起晒☀️，地上铺上新毯子，🐱在地上趴着就不会🥶了。 ","date":"2022-12-11","objectID":"/2022/:1:18","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-19 🔥。 ","date":"2022-12-11","objectID":"/2022/:1:19","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-20 ","date":"2022-12-11","objectID":"/2022/:1:20","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-21 分享最近很火的一段僵尸舞，来自《星期三》 ","date":"2022-12-11","objectID":"/2022/:1:21","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-22 感谢瑞幸咖啡和同事的草莓糖，味觉和嗅觉回来了😄 ","date":"2022-12-11","objectID":"/2022/:1:22","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-23 熬夜看完了《星期三》，喜欢这种暗黑👧🏻。 ","date":"2022-12-11","objectID":"/2022/:1:23","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-24 🍎 ","date":"2022-12-11","objectID":"/2022/:1:24","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-25 Merry Christmas🎄 ","date":"2022-12-11","objectID":"/2022/:1:25","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-26 这本书很有意思。 ","date":"2022-12-11","objectID":"/2022/:1:26","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-27 IoTSharp官网新鲜出炉。 ","date":"2022-12-11","objectID":"/2022/:1:27","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-28 少年去游荡，中年想掘藏，老年做和尚。 ","date":"2022-12-11","objectID":"/2022/:1:28","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-29 烤无双，很好吃呦😄 ","date":"2022-12-11","objectID":"/2022/:1:29","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-30 和家里人保持联系，他们是这个世界上最爱你的人。 ","date":"2022-12-11","objectID":"/2022/:1:30","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-31 2022 年的最后一天，这一年，浑浑噩噩，基本什么都没有干成。希望明年可以多做些有意义的事情。 2023 年的目标： 减重到 47 公斤左右 提升第一技能，react、vue3、typescript 等 开始第二技能，STEAM32、C、C++ 等 学一门乐器，例如尤克里里 保证参与开源项目，github争取每天都有贡献 每天学英语 微信读书读完 50 本书籍 买一套属于自己的房子 考 MBA 护肤、淡妆、健康、搞钱 多回家看看、多爱惜自己 ","date":"2022-12-11","objectID":"/2022/:1:31","tags":["碎碎念"],"title":"Q 的乱语 - 2022年","uri":"/2022/"},{"categories":null,"content":"关于 LoveIt","date":"2019-08-02","objectID":"/about/","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"  LoveIt 是一个由  Dillon 开发的简洁、优雅且高效的 Hugo 博客主题。 它的原型基于 LeaveIt 主题 和 KeepIt 主题。 Hugo 主题 LoveIt ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"特性 ","date":"2019-08-02","objectID":"/about/:1:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"性能和 SEO  性能优化：在 Google PageSpeed Insights 中， 99/100 的移动设备得分和 100/100 的桌面设备得分  使用基于 JSON-LD 格式 的 SEO SCHEMA 文件进行 SEO 优化  支持 Google Analytics  支持 Fathom Analytics  支持 Plausible Analytics  支持 Yandex Metrica  支持搜索引擎的网站验证 (Google, Bind, Yandex and Baidu)  支持所有第三方库的 CDN  基于 lazysizes 自动转换图片为懒加载 ","date":"2019-08-02","objectID":"/about/:1:1","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"外观和布局  桌面端/移动端 响应式布局  浅色/深色 主题模式  全局一致的设计语言  支持分页  易用和自动展开的文章目录  支持多语言和国际化  美观的 CSS 动画 社交和评论系统  支持 Gravatar 头像  支持本地头像  支持多达 73 种社交链接  支持多达 24 种网站分享  支持 Disqus 评论系统  支持 Gitalk 评论系统  支持 Valine 评论系统  支持 Facebook comments 评论系统  支持 Telegram comments 评论系统  支持 Commento 评论系统  支持 utterances 评论系统  支持 giscus 评论系统 ","date":"2019-08-02","objectID":"/about/:1:2","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"扩展功能  支持基于 Lunr.js 或 algolia 的搜索  支持 Twemoji  支持代码高亮  一键复制代码到剪贴板  支持基于 lightGallery 的图片画廊  支持 Font Awesome 图标的扩展 Markdown 语法  支持上标注释的扩展 Markdown 语法  支持分数的扩展 Markdown 语法  支持基于 $\\KaTeX$ 的数学公式  支持基于 mermaid 的图表 shortcode  支持基于 ECharts 的交互式数据可视化 shortcode  支持基于 Mapbox GL JS 的 Mapbox shortcode  支持基于 APlayer 和 MetingJS 的音乐播放器 shortcode  支持 Bilibili 视频 shortcode  支持多种注释的 shortcode  支持自定义样式的 shortcode  支持自定义脚本的 shortcode  支持基于 TypeIt 的打字动画 shortcode  支持基于 cookieconsent 的 Cookie 许可横幅  支持人物标签的 shortcode … ","date":"2019-08-02","objectID":"/about/:1:3","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"许可协议 LoveIt 根据 MIT 许可协议授权。 更多信息请查看 LICENSE 文件。 ","date":"2019-08-02","objectID":"/about/:2:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"特别感谢 LoveIt 主题中用到了以下项目，感谢它们的作者： normalize.css Font Awesome Simple Icons Animate.css autocomplete Lunr.js algoliasearch lazysizes object-fit-images Twemoji emoji-data lightGallery clipboard.js Sharer.js TypeIt $\\KaTeX$ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/about/:3:0","tags":null,"title":"关于 LoveIt","uri":"/about/"}]