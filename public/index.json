[{"categories":["碎碎念"],"content":"2023-01 ","date":"2023-01-30","objectID":"/2023/:1:0","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-01 去成都SKP逛一圈，才能知道自己有多穷😭 ","date":"2023-01-30","objectID":"/2023/:1:1","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-02 乔妹的演技还是可以，一口气追完了，期待第二季😄 ","date":"2023-01-30","objectID":"/2023/:1:2","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-03 ","date":"2023-01-30","objectID":"/2023/:1:3","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-04 读文学经典以来最大的感受是：慢慢看淡生与死。 ","date":"2023-01-30","objectID":"/2023/:1:4","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-05 做前端死路一条，后端也是。 ","date":"2023-01-30","objectID":"/2023/:1:5","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-06 或许曾经我们都想自己是齐天大圣，可长大后才发现，其实我们都只是一只努力生存的小猪妖。 ","date":"2023-01-30","objectID":"/2023/:1:6","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-07 不好好看文档系列😭。。包子都吃完了，才看到要按照顺序吃，可惜肚子吃不下了，不然再来一笼。 好想知道如果这样吃，会不会让灵魂得到升华🤔。 ","date":"2023-01-30","objectID":"/2023/:1:7","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-08 在飞机上看了《一条狗的使命2》，哭得稀里哗啦的😭。 多希望饼干🐱也可以一直历经生死轮回找到我并陪伴着我，直到我走到生命的终点。 ","date":"2023-01-30","objectID":"/2023/:1:8","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-09 犹豫了很久很久，终于下定决心入手 AJ 扣碎篮板😍。 钱不花就是一张纸，花了才是钱😳。 ","date":"2023-01-30","objectID":"/2023/:1:9","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-10 公司产品总监为了拍老板🐴屁，东西还没做完就着急给老板👁，然后白屏了，🦷都笑掉了。 ","date":"2023-01-30","objectID":"/2023/:1:10","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-11 闺蜜失恋了，被迫听了3个小时的她和她前男友的爱情故事🤕。 ","date":"2023-01-30","objectID":"/2023/:1:11","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-12 原来妈妈也喜欢听你给她讲在外面遇到的新鲜事儿😊。 ","date":"2023-01-30","objectID":"/2023/:1:12","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-13 塔勒布说过：“21世纪有三大毒品：海洛因、碳水化合物、每月发一次的工资。” ","date":"2023-01-30","objectID":"/2023/:1:13","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-14 直发回来的那一刻，如释重负😊。 ","date":"2023-01-30","objectID":"/2023/:1:14","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-15 😴😴😴 ","date":"2023-01-30","objectID":"/2023/:1:15","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-16 打扫卫生。 ","date":"2023-01-30","objectID":"/2023/:1:16","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-17 世界上怎么会有IU这么可爱的👧🏻。 ","date":"2023-01-30","objectID":"/2023/:1:17","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-18 重温《德鲁纳酒店》，每个人看似理智又冷静，但其实内心也有着最脆弱的一面，没有了依靠时，只能用坚强来掩盖自己的脆弱。 ","date":"2023-01-30","objectID":"/2023/:1:18","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-19 彩妆的尽头是裸妆 烫发的尽头是黑长直 美甲的尽头是肉粉色 医美的尽头是养生 消费主义的尽头是断舍离 道理的尽头是大道至简 万事的尽头是尽人事听天命 人生的尽头是一个人面对孤独 ","date":"2023-01-30","objectID":"/2023/:1:19","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-20 🤔发现一个挺有意思的事情，因为要回老家过年，给🐱准备了两个猫砂盆，这家伙竟然自己主动分类了，一个专门用来💧，一个专门用来💩。 ","date":"2023-01-30","objectID":"/2023/:1:20","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-21 新年快乐鸭🎆。 ","date":"2023-01-30","objectID":"/2023/:1:21","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-22 🥰的一天，老弟给买了烤鸡和🧋，陪爸爸妈妈一起看📺。 ","date":"2023-01-30","objectID":"/2023/:1:22","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-23 飞扬的👖。 ","date":"2023-01-30","objectID":"/2023/:1:23","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-24 4个人一起喝🍺，吐了1个，晕了2个。 ","date":"2023-01-30","objectID":"/2023/:1:24","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-25 ","date":"2023-01-30","objectID":"/2023/:1:25","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-26 I am sorry MJ… it’s 2023 and the world is still cruel. ","date":"2023-01-30","objectID":"/2023/:1:26","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-27 在🚄上读《解忧杂货店》，要是世界上真的有一家这样的店就好了。 ","date":"2023-01-30","objectID":"/2023/:1:27","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-28 上班第一天，😴。 ","date":"2023-01-30","objectID":"/2023/:1:28","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-29 😠。 ","date":"2023-01-30","objectID":"/2023/:1:29","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-30 一本书，可以折射一个小世界，也可以成为一部分人的朋友。 ","date":"2023-01-30","objectID":"/2023/:1:30","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["谈人生"],"content":"简述一下事情的起因，因为工作变动，没有太多时间找房子，在贝壳找房上紧急租到了套一公寓，和中介公司签订了半年的租房合同，签订合同前，凭借着自己那点可怜的人生经验觉得合同好像没什么问题，就痛快地签了。 (注：合同的甲方写的是房东的名字，涉及个人隐私部分打码)。 也怪自己租房前没仔细检查，搬进来之后发现电器有一些小问题，比如客厅灯不亮这些，想着也没有太大影响，反正只租了半年，到期后肯定不租了，就先凑合住吧，就这样相安无事地住了3个月。 今年1月份忽然被告知中介公司与房东合约到期（实际是公司经营不善决定退租(：房东说的，真假无从考证），并且双方在没有告知我的情况下已经完成了手续移交。 首先沟通的是宽带问题，因为之前要每个月给中介公司交200元杂费，其中包括物业费、宽带等之类的费用，现在中介公司不管了，宽带我肯定是要用的，遂找到房东，房东让我找中介公司，中介公司让我找房东（相互踢皮球）。以下是聊天记录： 和房东沟通： 和中介沟通： 房东让找中介，中介选择沉默，最后这件事情不了了之，没办法，自己装个宽带吧。。。害。 过节回来后，又有麻烦了，窗户的锁因为老旧坏掉了，大冬天太冷了，冻了3天之后，实在忍不了了，因为我对周围环境也不熟悉，想着联系下房东帮忙给处理下，然后就发生了不愉快的事情，房东勒令我立马搬出去，中介还是一如既往地踢皮球，还报了警，民警来了只是问了问，给了点建议，说他们管不了，然后就走了。 和房东沟通： 和中介沟通： 中间还给房东打了电话，房东说自己是70岁+的退休国家干部，已经实现了财务自由，言语中透露出浓浓地官僚资本主义，所以不在乎房子租不租的出去，只是怕麻烦，喊我如果想继续住下去，就每个月只按时给她房租，其余的事情全部自己来解决。 最后这件事情，肯定是自己掏钱把锁修好了。自己可能还是太年轻吧，言语中充满了愤愤不平和对当今这个社会的失望。冷静下来之后，研究了下租房合同、他们的交接协议、以及这段时间和他们的沟通记录： 首先：甲乙（甲：房东，乙：中介公司）双方于1月15日进行房子交割协议，中介公司将押金和15日之后的房租交给了房东，是不是就说明这个房子和中介公司没有关系了，以后房子的事情都由房东自己来处理（作为房东出租房屋应该有责任要处理房子硬件设施老化维护的问题）。 其次：中介公司未提前与我进行沟通，这种情况是不是处理太不恰当，并应该有义务对之后的纠纷进行协调处理。 附上一篇从网上找到的相关报道，虽然我目前的状况还没有这个人的这么严重… 我的朋友，你怎么看待这件事情呢？期待收获您的宝贵经验。 更新： 几位朋友给出了自己的建议。 “你可以找人问问合同的履行人现在是公司还是房东，but都很麻烦，走警察都是劝诫为主，走法院半年起步。” “这事只能吃哑巴亏，自己认倒霉。” “那你直接跟这个房东补签一个三个月的短租合同好了看她同不同意。” “你就说她让你搬出去也得把之前的押金退给你，然后你搬出去了再到她找到新房客中间少说也要一个多星期两个星期房子是空着的，她自己是有损失的，谁也不会跟钱过不去。” so，这房子到期就 👋🏻 吧 👵🏻，等待下一个倒霉 🥚 入坑。 ","date":"2023-01-30","objectID":"/blog/:0:0","tags":["谈人生"],"title":"由亲身经历的房屋出租纠纷引发的思考...","uri":"/blog/"},{"categories":["读书"],"content":"001 解忧杂货店 “如果把来找我咨询的人比喻成迷途的羔羊，通常他们手上都有地图，却没有去看，或是不知道自己目前的位置。但我相信你不属于这两种情况。你的地图是一张白纸，所以即使想决定目的地，也不知道路在哪里。地图是一张白纸，这当然很伤脑筋。任何人都会不知所措。可是换个角度来看，正因为是一张白纸，才可以随心所欲地描绘地图。一切全在你自己。对你来说，一切都是自由的，在你面前是无限的可能。这可是很棒的事啊。我衷心祈祷你可以相信自己，无悔地燃烧自己的人生。 –浪矢杂货店” ","date":"2023-01-30","objectID":"/books/:1:0","tags":["连载","读书"],"title":"50本读书计划-2023年","uri":"/books/"},{"categories":["读书"],"content":"002 生活蒙太奇 “那些平淡无奇的日子：晒在午后三点的阳光下，雨天一个人读书，抬头遇见初雪…” ","date":"2023-01-30","objectID":"/books/:2:0","tags":["连载","读书"],"title":"50本读书计划-2023年","uri":"/books/"},{"categories":["第一技能"],"content":"项目地址： ElectronVue3 ","date":"2023-01-28","objectID":"/electron/:0:0","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"构建开发环境 按如下步骤搭建开发环境： ","date":"2023-01-28","objectID":"/electron/:1:0","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"创建项目 首先通过命令行创建一个 Vue 项目： npm create vite@latest electron -- --template vue-ts 安装 electron 依赖： npm i electron -D 调整 package.json 文件： { \"name\": \"electron\", \"private\": true, \"version\": \"0.0.0\", \"scripts\": { \"dev\": \"vite\", \"build\": \"vue-tsc --noEmit \u0026\u0026 vite build\", \"preview\": \"vite preview\" }, \"dependencies\": {}, \"devDependencies\": { \"@vitejs/plugin-vue\": \"^4.0.0\", \"electron\": \"^22.0.3\", \"typescript\": \"^4.9.3\", \"vite\": \"^4.0.0\", \"vue-tsc\": \"^1.0.11\", \"vue\": \"^3.2.45\" } } 将 vue 从 dependencies 移到 devDependencies。 在 Vite 编译项目的时候，Vue 库会被编译到输出目录下，输出目录下的内容是完整的，没必要把 Vue 标记为生产依赖；而且在我们将来制作安装包的时候，还要用到这个 package.json 文件，它的生产依赖里不应该有没用的东西。 去掉 type: module 配置项。 package.json 里的 type 定义了这个项目所有 .js 文件的处理方式。 如果 type 的值为 module，那么所有 .js 文件将被当做 ES Modules 对待。如果 type 的值为 commonjs，那么所有 .js 文件将被当做 CommonJS 模块对待。如果没有设置 type，那么它的默认值为 commonjs。 ","date":"2023-01-28","objectID":"/electron/:1:1","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"创建主进程代码 新建主进程入口文件：src/main/mainEntry.ts import { app, BrowserWindow } from \"electron\"; let mainWindow: BrowserWindow; app.whenReady().then(() =\u003e { mainWindow = new BrowserWindow({}); mainWindow.loadURL(process.argv[2]); }); app 是 Electron 的全局对象，用于控制整个应用程序的生命周期。 Electron 初始化完成后，app 对象的 ready 事件被触发。 app ready 后创建一个 BrowserWindow 对象，mainWindow 被设置为一个全局变量，避免被 JS 垃圾回收机制回收。 窗口加载了一个 Url 路径，这个路径以命令行参数（第三个参数）的方式传递给应用程序。 app 和 BrowserWindow 都是 Electron 的内置模块，这些内置模块是通过 ES Module 的形式导入进来的。 ","date":"2023-01-28","objectID":"/electron/:1:2","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"开发环境 Vite 插件 主进程的代码写好后，需要编译过之后才能被 Electron 加载，通过 Vite 插件的形式来完成编译和加载工作。 import { ViteDevServer } from 'vite'; interface IAddressInfo { address: string; port: string; } export let devPlugin = () =\u003e { return { name: 'dev-plugin', configureServer(server: ViteDevServer) { require('esbuild').buildSync({ entryPoints: ['./src/main/mainEntry.ts'], bundle: true, platform: 'node', outfile: './dist/mainEntry.js', external: ['electron'], }); server?.httpServer?.once('listening', () =\u003e { let { spawn } = require('child_process'); let addressInfo: IAddressInfo = server?.httpServer?.address() as unknown as IAddressInfo; let httpAddress = `http://${addressInfo?.address}:${addressInfo?.port}`; let electronProcess = spawn(require('electron').toString(), ['./dist/mainEntry.js', httpAddress], { cwd: process.cwd(), stdio: 'inherit', }); electronProcess.on('close', () =\u003e { server.close(); process.exit(); }); }); }, }; }; 注册了一个名为 configureServer 的钩子，当 Vite 启动 Http 服务时，configureServer 会执行。 入参为类型为 ViteDevServer 的对象 server，server 持有一个 http.Server 类型的属性 httpServer，这个属性代表调试 Vue 页面的 http 服务，一般情况下地址为：http://127.0.0.1:5173/。 通过监听 server.httpServer 的 listening 事件来判断 httpServer 是否已经成功启动。如果已经成功启动，就启动 Electron 应用，并给它传递两个命令行参数，第一个参数是主进程代码编译后的文件路径，第二个参数是 Vue 页面的 http 地址。 通过 Node.js child_process 模块的 spawn 方法启动 electron 子进程，除了两个命令行参数外，还传递了一个配置对象。 这个对象的 cwd 属性用于设置当前的工作目录，process.cwd() 返回的值就是当前项目的根目录。 stdio 用于设置 electron 进程的控制台输出，这里设置 inherit 可以让 electron 子进程的控制台输出数据同步到主进程的控制台。 在主进程中 console.log 的内容就可以在 VSCode 的控制台上看到了。 当 electron 子进程退出的时候，要关闭 Vite 的 http 服务，并且控制父进程退出，准备下一次启动。 http 服务启动之前，使用 esbuild 模块完成了主进程 TypeScript 代码的编译工作，这个模块是 Vite 自带的，不需要额外安装，可以直接使用。 主进程的入口文件是通过 entryPoints 配置属性设置的，编译完成后的输出文件是通过 outfile 属性配置的。 编译平台 platform 设置为 node，排除的模块 external 设置为 electron，这两个设置使在主进程代码中可以通过 import 的方式导入 electron 内置的模块，非但如此，Node 的内置模块也可以通过 import 的方式引入。 在 vite.config.ts 文件中引入： import { defineConfig } from 'vite'; import vue from '@vitejs/plugin-vue'; import { devPlugin } from './plugins/devPlugin'; // https://vitejs.dev/config/ export default defineConfig({ plugins: [devPlugin(), vue()], }) 在 tsconfig.node.json 中配置 plugins 路径： { \"compilerOptions\": { \"composite\": true, \"module\": \"ESNext\", \"moduleResolution\": \"Node\", \"allowSyntheticDefaultImports\": true }, \"include\": [\"vite.config.ts\", \"./plugins/*.*\"] } 执行命令 npm run dev: ","date":"2023-01-28","objectID":"/electron/:1:3","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"渲染进程集成内置模块 现在主进程内可以自由的使用 Electron 和 Node.js 的内置模块了，但渲染进程还不行。 修改主进程代码，打开渲染进程的一些开关，允许渲染进程使用 Node.js 的内置模块: import { app, BrowserWindow } from 'electron'; process.env.ELECTRON_DISABLE_SECURITY_WARNINGS = 'true'; let mainWindow: BrowserWindow; app.whenReady().then(() =\u003e { let config = { webPreferences: { nodeIntegration: true, webSecurity: false, allowRunningInsecureContent: true, contextIsolation: false, webviewTag: true, spellcheck: false, disableHtmlFullscreenWindowResize: true, }, }; mainWindow = new BrowserWindow(config); mainWindow.webContents.openDevTools({ mode: 'undocked' }); mainWindow.loadURL(process.argv[2]); }); ELECTRON_DISABLE_SECURITY_WARNINGS 用于设置渲染进程开发者调试工具的警告，这里设置为 true 就不会再显示任何警告了。 nodeIntegration配置项的作用是把 Node.js 环境集成到渲染进程中。 contextIsolation配置项的作用是在同一个 JavaScript 上下文中使用 Electron API。 webContents的openDevTools方法用于打开开发者调试工具。 现在可以在开发者调试工具中访问 Node.js 和 Electron 的内置模块了。 ","date":"2023-01-28","objectID":"/electron/:1:4","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"设置模块别名与解析钩子 虽然可以在开发者调试工具中使用 Node.js 和 Electron 的内置模块，但现在还不能在 Vue 的页面内使用这些模块。 因为 Vite 主动屏蔽了这些内置的模块，如果开发者强行引入它们，那么大概率会得到如下报错： Module \"xxxx\" has been externalized for browser compatibility and cannot be accessed in client code. 安装 vite-plugin-optimizer： npm i vite-plugin-optimizer -D 修改 vite.config.ts 的代码，让 Vite 加载这个插件： import { defineConfig } from 'vite'; import vue from '@vitejs/plugin-vue'; import { devPlugin, getReplacer } from './plugins/devPlugin'; import optimizer from 'vite-plugin-optimizer'; // https://vitejs.dev/config/ export default defineConfig({ plugins: [optimizer(getReplacer()), devPlugin(), vue()], }) vite-plugin-optimizer 插件会创建一个临时目录：node_modules.vite-plugin-optimizer。 然后把类似 const fs = require(‘fs’); export { fs as default } 这样的代码写入这个目录下的 fs.js 文件中。 渲染进程执行到：import fs from “fs” 时，就会请求这个目录下的 fs.js 文件，这样就达到了在渲染进程中引入 Node 内置模块的目的。 getReplacer 方法是为 vite-plugin-optimizer 插件提供的内置模块列表: export let getReplacer = () =\u003e { let externalModels = ['os', 'fs', 'path', 'events', 'child_process', 'crypto', 'http', 'buffer', 'url', 'better-sqlite3', 'knex']; let result = {}; for (let item of externalModels) { result[item] = () =\u003e ({ find: new RegExp(`^${item}$`), code: `const ${item} = require('${item}'); export { ${item} as default }`, }); } result['electron'] = () =\u003e { let electronModules = ['clipboard', 'ipcRenderer', 'nativeImage', 'shell', 'webFrame'].join(','); return { find: new RegExp(`^electron$`), code: `const {${electronModules}} = require('electron'); export { ${electronModules} }`, } } return result; } 在这个方法中把一些常用的 Node 模块和 electron 的内置模块提供给了 vite-plugin-optimizer 插件，以后想要增加新的内置模块只要修改这个方法即可。 vite-plugin-optimizer 插件不仅用于开发环境，编译 Vue 项目时，它也会参与工作。 通过如下代码在 Vue 组件中做测试： // src\\App.vue import fs from \"fs\"; import { ipcRenderer } from \"electron\"; import { onMounted } from \"vue\"; onMounted(() =\u003e { console.log(fs.writeFileSync); console.log(ipcRenderer); }); 开发者调试工具将会输出如下内容： ","date":"2023-01-28","objectID":"/electron/:1:5","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"构建生产环境 制作一个 Vite 插件。通过这个新的插件生成安装包，有了安装包就可以把应用分发给用户了。 ","date":"2023-01-28","objectID":"/electron/:2:0","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"编译结束钩子函数 vite.config.ts 增加一个新的配置： import { defineConfig } from 'vite'; import vue from '@vitejs/plugin-vue'; import { devPlugin, getReplacer } from './plugins/devPlugin'; import { buildPlugin } from './plugins/buildPlugin'; import optimizer from 'vite-plugin-optimizer'; // https://vitejs.dev/config/ export default defineConfig({ build: { rollupOptions: { plugins: [buildPlugin()], }, }, plugins: [optimizer(getReplacer()), devPlugin(), vue()], }) ","date":"2023-01-28","objectID":"/electron/:2:1","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"制作应用安装包 vite 编译完成之后，也就是执行 npm run build 指令，将在项目dist目录内会生成一系列的文件（如下图所示），此时 closeBundle 钩子被调用，在这个钩子中把上述生成的文件打包成一个应用程序安装包。 import path from 'path'; import fs from 'fs'; class BuildObj { // 编译主进程代码 buildMain() { require('esbuild').buildSync({ entryPoints: ['./src/main/mainEntry.ts'], bundle: true, platform: 'node', minify: true, outfile: './dist/mainEntry.js', external: ['electron'], }); } // 为生产环境准备package.json preparePackageJson() { let pkgJsonPath = path.join(process.cwd(), 'package.json'); let localPkgJson = JSON.parse(fs.readFileSync(pkgJsonPath, 'utf-8')); let electronConfig = localPkgJson.devDependencies.electron.replace('^', ''); localPkgJson.main = 'mainEntry.js'; delete localPkgJson['scripts']; delete localPkgJson['devDependencies']; localPkgJson.devDependencies = { electron: electronConfig, }; let tarJsonPath = path.join(process.cwd(), 'dist', 'package.json'); fs.writeFileSync(tarJsonPath, JSON.stringify(localPkgJson)); fs.mkdirSync(path.join(process.cwd(), 'dist/node_modules')); } // 使用electron-builder制成安装包 buildInstaller() { let options = { config: { directories: { output: path.join(process.cwd(), 'release'), app: path.join(process.cwd(), 'dist'), }, files: ['**'], extends: null, productName: 'Electron', appId: 'com.xxx.desktop', asar: true, nsis: { oneClick: true, perMachine: true, allowToChangeInstallationDirectory: false, createDesktopShortcut: true, createStartMenuShortcut: true, shortcutName: 'ElectronDesktop', }, publish: [{ provider: 'generic', url: 'http://localhost:5500/', }], }, project: process.cwd(), }; return require('electron-builder').build(options); } } export let buildPlugin = () =\u003e { return { name: 'build-plugin', closeBundle: () =\u003e { let buildObj = new BuildObj(); buildObj?.buildMain(); buildObj?.preparePackageJson(); buildObj?.buildInstaller(); } } } 这个对象通过三个方法提供了三个功能： buildMain。由于 ite 在编译之前会清空 dist 目录，所以在之前生成的 mainEntry.js 文件也被删除了，此处通过 buildMain 方法再次编译主进程代码。不过由于此处是在为生产环境编译代码，所以增加了minify: true 配置，生成压缩后的代码。 preparePackageJson。用户安装产品后，在启动应用程序时，实际上是通过 Electron 启动一个 Node.js 的项目，所以要为这个项目准备一个 package.json 文件，这个文件是以当前项目的 package.json 文件为蓝本制作而成的。里面注明了主进程的入口文件，移除了一些对最终用户没用的配置节。 buildInstaller。这个方法负责调用 electron-builder（npm install electron-builder -D 安装 electron-builder 库） 提供的 API 以生成安装包。最终生成的安装包被放置在 release 目录下，这是通过 config.directories.output 指定的。静态文件所在目录是通过 config.directories.app 配置项指定。其他配置项，请自行查阅官网文档。 生成 package.json 文件之后，还创建了一个 node_modules 目录。此举是为了阻止 electron-builder 的一些默认行为（目前来说它会阻止 electron-builder 创建一些没用的目录或文件）。 这段脚本还明确指定了 Electron 的版本号，如果 Electron 的版本号前面有\"^“符号的话，需把它删掉。这是 electron-builder 的一个 Bug，这个 bug 导致 electron-builder 无法识别带 ^ 或 ~ 符号的版本号。 做好这些配置之后，执行 npm run build 就可以制作安装包了，最终生成的安装文件会被放置到 release 目录下。 ","date":"2023-01-28","objectID":"/electron/:2:2","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"主进程生产环境加载本地文件 虽然成功制作了安装包，而且这个安装包可以正确安装应用程序，但是这个应用程序无法正常启动，这是因为应用程序的主进程还在通过 process.argv[2] 加载首页。显然用户通过安装包安装的应用程序没有这个参数。 接下来就要让应用程序在没有这个参数的时候，也能加载静态页面。 新建 src\\main\\CustomScheme.ts： import { protocol } from 'electron'; import path from 'path'; import fs from 'fs'; // 为自定义app协议提供特权 let schemeConfig = { standard: true, supportFetchAPI: true, bypassCSP: true, corsEnabled: true, stream: true, }; protocol.registerSchemesAsPrivileged([{ scheme: 'app', privileges: schemeConfig, }]); export class CustomScheme { // 根据文件扩展名获取mime-type private static getMimeType(extension: string) { let mineType = ''; switch (extension) { case '.js': mineType = 'text/javascript'; break; case '.html': mineType = 'text/html'; break; case '.css': mineType = 'text/css'; break; case '.svg': mineType = 'image/svg+xml'; break; case '.json': mineType = 'application/json'; break; } return mineType; }; // 注册自定义app协议 static registerScheme() { protocol.registerStreamProtocol('app', (request, callback) =\u003e { let pathName = new URL(request.url).pathname; let extension = path.extname(pathName).toLowerCase(); if (extension === '') { pathName = 'index.html'; extension = '.html'; } let tarFile = path.join(__dirname, pathName); callback({ statusCode: 200, headers: { 'content-type': this.getMimeType(extension), }, data: fs.createReadStream(tarFile), }) }); }; } 在主进程 app ready 前，通过 protocol 对象的 registerSchemesAsPrivileged 方法为名为 app 的 scheme 注册了特权（可以使用 FetchAPI、绕过内容安全策略等）。 在 app ready 之后，通过 protocol 对象的 registerStreamProtocol 方法为名为 app 的 scheme 注册了一个回调函数。当加载类似 app://index.html 这样的路径时，这个回调函数将被执行。 这个函数有两个传入参数 request 和 callback，通过 request.url 获取到请求的文件路径，通过 callback 做出响应。 给出响应时，要指定响应的 statusCode 和 content-type，这个 content-type 是通过文件的扩展名得到的。这里通过 getMimeType 方法确定了文件的 content-type。 响应的 data 属性为目标文件的可读数据流，当你的静态文件比较大时，不必读出整个文件再给出响应。 接下来在 src\\main\\mainEntry.ts 中使用这段代码： import {CustomScheme} from './customScheme'; if (process.argv[2]) { mainWindow.loadURL(process.argv[2]); } else { CustomScheme.registerScheme(); mainWindow.loadURL('app\"//index.html'); } 这样当存在指定的命令行参数时，就认为是开发环境，使用命令行参数加载页面，当不存在命令行参数时，就认为是生产环境，通过 app:// scheme 加载页面。 ","date":"2023-01-28","objectID":"/electron/:2:3","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第二技能"],"content":"项目地址： learningC- ","date":"2023-01-22","objectID":"/c-/:0:0","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["第二技能"],"content":"VSCode C++ 环境配置 ","date":"2023-01-22","objectID":"/c-/:1:0","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["第二技能"],"content":"VSCode 下载 官网下载 Visual Studio Code ","date":"2023-01-22","objectID":"/c-/:1:1","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["第二技能"],"content":"扩展包安装 C/C++ CodeLLDB ","date":"2023-01-22","objectID":"/c-/:1:2","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["第二技能"],"content":"环境配置 新建 main.cpp 文件，输入以下代码： #include \u003ciostream\u003e int main() { std::cout \u003c\u003c \"hello world\" \u003c\u003c std::endl; char c = std::getchar(); return 0; } 点击运行调试，选择 C++ (GDB/LLDB) 选择 g++ 生成和调试活动文件 在 .vscode 中会生成两个文件，对这两个文件进行配置： launch.json { // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"lldb\", \"request\": \"launch\", \"name\": \"C++ debug\", \"program\": \"${fileDirname}/${fileBasenameNoExtension}\", \"args\": [], \"cwd\": \"${workspaceFolder}\", \"preLaunchTask\": \"C/C++: g++ 生成活动文件\" } ] } tasks.json { \"tasks\": [ { \"type\": \"cppbuild\", \"label\": \"C/C++: g++ 生成活动文件\", \"command\": \"/usr/bin/g++\", \"args\": [ \"-std=c++17\", \"-stdlib=libc++\", \"-fdiagnostics-color=always\", \"-g\", \"-Wall\", \"${file}\", \"-o\", \"${fileDirname}/${fileBasenameNoExtension}\" ], \"options\": { \"cwd\": \"${fileDirname}\" }, \"problemMatcher\": [ \"$gcc\" ], \"group\": { \"kind\": \"build\", \"isDefault\": true }, \"detail\": \"调试器生成的任务。\" } ], \"version\": \"2.0.0\" } 至此，C++ 环境配置完成。 运行项目，输出结果： ","date":"2023-01-22","objectID":"/c-/:1:3","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["第二技能"],"content":"包含目录和依赖项 在 C++ 程序中包含两种文件：头文件 (.h) 和源码文件 (.cpp)，一个业务单元 (比如 a.h 和 a.cpp)，头文件负责定义类型、方法和变量，源码文件则负责实现类型、方法和为变量赋值。 源码文件为了实现头文件中定义的内容，需要通过如下方式引入头文件： #include \"a.h\" 想在 a 业务单元中引入 b 业务单元定义的内容，也需要通过 include 方式引入： #include \"bHeaderFilePath/b.h\" 可以在 a.h 中引入 b 的头文件，也可以在 a.cpp 中引入 b 的头文件。 如果是在 a.h 中引入了 b 的头文件，则 a.h 和 a.cpp 都可以使用 b 的头文件中定义的内容。 如果只在 a.cpp 中引入了 b 的头文件，则只能在 a.cpp 中使用 b 的头文件中定义的内容。 如果引入操作系统 SDK 提供的头文件或标准库提供的头文件，则不用写明头文件的相对路径，但需要用尖括号包裹。 #include \u003ciostream\u003e //这个头文件没有.h扩展名 #include \u003cwindows.h\u003e ","date":"2023-01-22","objectID":"/c-/:2:0","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["乱涂乱画"],"content":"001 窗台上的🐱 下辈子做一只猫，翘着尾巴云游天下，跟狗打架。 ","date":"2023-01-19","objectID":"/draw/:1:0","tags":["连载","乱涂乱画"],"title":"100张油画棒画计划","uri":"/draw/"},{"categories":["乱涂乱画"],"content":"002 🐳与☁️ 热爱漫无边际，生活自有分寸。 ","date":"2023-01-19","objectID":"/draw/:2:0","tags":["连载","乱涂乱画"],"title":"100张油画棒画计划","uri":"/draw/"},{"categories":["乱涂乱画"],"content":"003 露营⛺️ 一起去露营吧，揽星河入怀，拥山野而眠。 ","date":"2023-01-19","objectID":"/draw/:3:0","tags":["连载","乱涂乱画"],"title":"100张油画棒画计划","uri":"/draw/"},{"categories":["乱涂乱画"],"content":"004 福🐰贺春 新年快乐。 ","date":"2023-01-19","objectID":"/draw/:4:0","tags":["连载","乱涂乱画"],"title":"100张油画棒画计划","uri":"/draw/"},{"categories":["碎碎念"],"content":"2022-12 ","date":"2022-12-11","objectID":"/2022/:1:0","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-01 钱都起床了，你还不起。 ","date":"2022-12-11","objectID":"/2022/:1:1","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-02 坚持每周中强度运动150分钟/高强度运动70分钟，可以获得一个漂亮的大海马体。 ","date":"2022-12-11","objectID":"/2022/:1:2","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-03 人可以平庸，但不能踩着人往上，也不能通过贬低和否定他人，来实现自己的价值。 ","date":"2022-12-11","objectID":"/2022/:1:3","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-04 被欲望蒙蔽双眼的人，往往分不清眼前的是食物还是诱饵。 ","date":"2022-12-11","objectID":"/2022/:1:4","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-05 这支球队就像一个平凡努力的普通人的一生。他不是最强最出彩的，但你想赢他也不容易，因为他有强大的定力和拼劲，打不倒压不垮，还能绝处逢生。 ","date":"2022-12-11","objectID":"/2022/:1:5","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-06 不到最后一刻，都不算真正结束。 ","date":"2022-12-11","objectID":"/2022/:1:6","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-07 你知道养劳工为什么不能让他们不愁吃穿吗？因为他们会以为自己才是主人。 ","date":"2022-12-11","objectID":"/2022/:1:7","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-08 公司有人🐑了。。。 ","date":"2022-12-11","objectID":"/2022/:1:8","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-09 神🐱压中了🇭🇷 ","date":"2022-12-11","objectID":"/2022/:1:9","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-10 公司后端写的烂接口，一个都不能用，就混吧 ","date":"2022-12-11","objectID":"/2022/:1:10","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-11 《纸房子·第二季》 “纸房子是人民的！” 小红猪里裂开的都是💰啊。。 ","date":"2022-12-11","objectID":"/2022/:1:11","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-12 🥶🥶🥶 ","date":"2022-12-11","objectID":"/2022/:1:12","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-13 嗓子冒烟了。 ","date":"2022-12-11","objectID":"/2022/:1:13","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-14 🐑了。 ","date":"2022-12-11","objectID":"/2022/:1:14","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-15 发烧中。 ","date":"2022-12-11","objectID":"/2022/:1:15","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-16 发烧中。 ","date":"2022-12-11","objectID":"/2022/:1:16","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-17 发烧中。 ","date":"2022-12-11","objectID":"/2022/:1:17","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-18 和饼干一起晒☀️，地上铺上新毯子，🐱在地上趴着就不会🥶了。 ","date":"2022-12-11","objectID":"/2022/:1:18","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-19 🔥。 ","date":"2022-12-11","objectID":"/2022/:1:19","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-20 ","date":"2022-12-11","objectID":"/2022/:1:20","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-21 分享最近很火的一段僵尸舞，来自《星期三》 ","date":"2022-12-11","objectID":"/2022/:1:21","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-22 感谢瑞幸咖啡和同事的草莓糖，味觉和嗅觉回来了😄 ","date":"2022-12-11","objectID":"/2022/:1:22","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-23 熬夜看完了《星期三》，喜欢这种暗黑👧🏻。 ","date":"2022-12-11","objectID":"/2022/:1:23","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-24 🍎 ","date":"2022-12-11","objectID":"/2022/:1:24","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-25 Merry Christmas🎄 ","date":"2022-12-11","objectID":"/2022/:1:25","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-26 这本书很有意思。 ","date":"2022-12-11","objectID":"/2022/:1:26","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-27 IoTSharp官网新鲜出炉。 ","date":"2022-12-11","objectID":"/2022/:1:27","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-28 少年去游荡，中年想掘藏，老年做和尚。 ","date":"2022-12-11","objectID":"/2022/:1:28","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-29 烤无双，很好吃呦😄 ","date":"2022-12-11","objectID":"/2022/:1:29","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-30 和家里人保持联系，他们是这个世界上最爱你的人。 ","date":"2022-12-11","objectID":"/2022/:1:30","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-31 2022 年的最后一天，这一年，浑浑噩噩，基本什么都没有干成。希望明年可以多做些有意义的事情。 2023 年的目标： 减重到 47 公斤左右 提升第一技能，react、vue3、typescript 等 开始第二技能，STEAM32、C、C++ 等 学一门乐器，例如尤克里里 保证参与开源项目，github争取每天都有贡献 每天学英语 微信读书读完 50 本书籍 买一套属于自己的房子 考 MBA 护肤、淡妆、健康、搞钱 多回家看看、多爱惜自己 ","date":"2022-12-11","objectID":"/2022/:1:31","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":null,"content":"关于 LoveIt","date":"2019-08-02","objectID":"/about/","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"  LoveIt 是一个由  Dillon 开发的简洁、优雅且高效的 Hugo 博客主题。 它的原型基于 LeaveIt 主题 和 KeepIt 主题。 Hugo 主题 LoveIt ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"特性 ","date":"2019-08-02","objectID":"/about/:1:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"性能和 SEO  性能优化：在 Google PageSpeed Insights 中， 99/100 的移动设备得分和 100/100 的桌面设备得分  使用基于 JSON-LD 格式 的 SEO SCHEMA 文件进行 SEO 优化  支持 Google Analytics  支持 Fathom Analytics  支持 Plausible Analytics  支持 Yandex Metrica  支持搜索引擎的网站验证 (Google, Bind, Yandex and Baidu)  支持所有第三方库的 CDN  基于 lazysizes 自动转换图片为懒加载 ","date":"2019-08-02","objectID":"/about/:1:1","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"外观和布局  桌面端/移动端 响应式布局  浅色/深色 主题模式  全局一致的设计语言  支持分页  易用和自动展开的文章目录  支持多语言和国际化  美观的 CSS 动画 社交和评论系统  支持 Gravatar 头像  支持本地头像  支持多达 73 种社交链接  支持多达 24 种网站分享  支持 Disqus 评论系统  支持 Gitalk 评论系统  支持 Valine 评论系统  支持 Facebook comments 评论系统  支持 Telegram comments 评论系统  支持 Commento 评论系统  支持 utterances 评论系统  支持 giscus 评论系统 ","date":"2019-08-02","objectID":"/about/:1:2","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"扩展功能  支持基于 Lunr.js 或 algolia 的搜索  支持 Twemoji  支持代码高亮  一键复制代码到剪贴板  支持基于 lightGallery 的图片画廊  支持 Font Awesome 图标的扩展 Markdown 语法  支持上标注释的扩展 Markdown 语法  支持分数的扩展 Markdown 语法  支持基于 $\\KaTeX$ 的数学公式  支持基于 mermaid 的图表 shortcode  支持基于 ECharts 的交互式数据可视化 shortcode  支持基于 Mapbox GL JS 的 Mapbox shortcode  支持基于 APlayer 和 MetingJS 的音乐播放器 shortcode  支持 Bilibili 视频 shortcode  支持多种注释的 shortcode  支持自定义样式的 shortcode  支持自定义脚本的 shortcode  支持基于 TypeIt 的打字动画 shortcode  支持基于 cookieconsent 的 Cookie 许可横幅  支持人物标签的 shortcode … ","date":"2019-08-02","objectID":"/about/:1:3","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"许可协议 LoveIt 根据 MIT 许可协议授权。 更多信息请查看 LICENSE 文件。 ","date":"2019-08-02","objectID":"/about/:2:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"特别感谢 LoveIt 主题中用到了以下项目，感谢它们的作者： normalize.css Font Awesome Simple Icons Animate.css autocomplete Lunr.js algoliasearch lazysizes object-fit-images Twemoji emoji-data lightGallery clipboard.js Sharer.js TypeIt $\\KaTeX$ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/about/:3:0","tags":null,"title":"关于 LoveIt","uri":"/about/"}]