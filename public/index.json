[{"categories":["碎碎念"],"content":"2023-01 ","date":"2023-01-25","objectID":"/2023/:1:0","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-01 去成都SKP逛一圈，才能知道自己有多穷😭 ","date":"2023-01-25","objectID":"/2023/:1:1","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-02 乔妹的演技还是可以，一口气追完了，期待第二季😄 ","date":"2023-01-25","objectID":"/2023/:1:2","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-03 ","date":"2023-01-25","objectID":"/2023/:1:3","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-04 读文学经典以来最大的感受是：慢慢看淡生与死。 ","date":"2023-01-25","objectID":"/2023/:1:4","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-05 做前端死路一条，后端也是。 ","date":"2023-01-25","objectID":"/2023/:1:5","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-06 或许曾经我们都想自己是齐天大圣，可长大后才发现，其实我们都只是一只努力生存的小猪妖。 ","date":"2023-01-25","objectID":"/2023/:1:6","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-07 不好好看文档系列😭。。包子都吃完了，才看到要按照顺序吃，可惜肚子吃不下了，不然再来一笼。 好想知道如果这样吃，会不会让灵魂得到升华🤔。 ","date":"2023-01-25","objectID":"/2023/:1:7","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-08 在飞机上看了《一条狗的使命2》，哭得稀里哗啦的😭。 多希望饼干🐱也可以一直历经生死轮回找到我并陪伴着我，直到我走到生命的终点。 ","date":"2023-01-25","objectID":"/2023/:1:8","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-09 犹豫了很久很久，终于下定决心入手 AJ 扣碎篮板😍。 钱不花就是一张纸，花了才是钱😳。 ","date":"2023-01-25","objectID":"/2023/:1:9","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-10 公司产品总监为了拍老板🐴屁，东西还没做完就着急给老板👁，然后白屏了，🦷都笑掉了。 ","date":"2023-01-25","objectID":"/2023/:1:10","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-11 闺蜜失恋了，被迫听了3个小时的她和她前男友的爱情故事🤕。 ","date":"2023-01-25","objectID":"/2023/:1:11","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-12 原来妈妈也喜欢听你给她讲在外面遇到的新鲜事儿😊。 ","date":"2023-01-25","objectID":"/2023/:1:12","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-13 塔勒布说过：“21世纪有三大毒品：海洛因、碳水化合物、每月发一次的工资。” ","date":"2023-01-25","objectID":"/2023/:1:13","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-14 直发回来的那一刻，如释重负😊。 ","date":"2023-01-25","objectID":"/2023/:1:14","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-15 😴😴😴 ","date":"2023-01-25","objectID":"/2023/:1:15","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-16 打扫卫生。 ","date":"2023-01-25","objectID":"/2023/:1:16","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-17 世界上怎么会有IU这么可爱的👧🏻。 ","date":"2023-01-25","objectID":"/2023/:1:17","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-18 重温《德鲁纳酒店》，每个人看似理智又冷静，但其实内心也有着最脆弱的一面，没有了依靠时，只能用坚强来掩盖自己的脆弱。 ","date":"2023-01-25","objectID":"/2023/:1:18","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-19 彩妆的尽头是裸妆 烫发的尽头是黑长直 美甲的尽头是肉粉色 医美的尽头是养生 消费主义的尽头是断舍离 道理的尽头是大道至简 骄傲的尽头是允许自己做自己，允许别人做别人 万事的尽头是尽人事听天命 人生的尽头是一个人面对孤独 ","date":"2023-01-25","objectID":"/2023/:1:19","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-20 🤔发现一个挺有意思的事情，因为要回老家过年，给🐱准备了两个猫砂盆，这家伙竟然自己主动分类了，一个专门用来💧，一个专门用来💩。 ","date":"2023-01-25","objectID":"/2023/:1:20","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-21 新年快乐鸭🎆。 ","date":"2023-01-25","objectID":"/2023/:1:21","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-22 🥰的一天，老弟给买了烤鸡和🧋，陪爸爸妈妈一起看📺。 ","date":"2023-01-25","objectID":"/2023/:1:22","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-23 飞扬的👖。 ","date":"2023-01-25","objectID":"/2023/:1:23","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-24 4个人一起喝🍺，吐了1个，晕了2个。 ","date":"2023-01-25","objectID":"/2023/:1:24","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["碎碎念"],"content":"01-25 想起高中三年一直都很喜欢的那个男孩子，上历史课一起躲在桌子底下听周董的新专辑，听他给我唱周董的歌，一起玩，一起闹，一起笑，高考完一直到我大学谈恋爱前都一直联系，最后一次联系我说我有男朋友了，然后就再也没联系了，那会脸皮太薄，如果脸皮厚一点，我去主动捅破这层窗户纸，结果会不会不一样，现在人家娃娃都好几岁了。哈哈哈，祝他一辈子幸福哦🥰。 ","date":"2023-01-25","objectID":"/2023/:1:25","tags":["连载","碎碎念"],"title":"Q的乱语-2023年","uri":"/2023/"},{"categories":["第一技能"],"content":"项目地址： ElectronVue3 ","date":"2023-01-22","objectID":"/electron/:0:0","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"构建开发环境 按如下步骤搭建开发环境： ","date":"2023-01-22","objectID":"/electron/:1:0","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"创建项目 首先通过命令行创建一个 Vue 项目： npm create vite@latest electron -- --template vue-ts 安装 electron 依赖： npm i electron -D 调整 package.json 文件： { \"name\": \"electron\", \"private\": true, \"version\": \"0.0.0\", \"scripts\": { \"dev\": \"vite\", \"build\": \"vue-tsc --noEmit \u0026\u0026 vite build\", \"preview\": \"vite preview\" }, \"dependencies\": {}, \"devDependencies\": { \"@vitejs/plugin-vue\": \"^4.0.0\", \"electron\": \"^22.0.3\", \"typescript\": \"^4.9.3\", \"vite\": \"^4.0.0\", \"vue-tsc\": \"^1.0.11\", \"vue\": \"^3.2.45\" } } 将 vue 从 dependencies 移到 devDependencies。 在 Vite 编译项目的时候，Vue 库会被编译到输出目录下，输出目录下的内容是完整的，没必要把 Vue 标记为生产依赖；而且在我们将来制作安装包的时候，还要用到这个 package.json 文件，它的生产依赖里不应该有没用的东西。 去掉 type: module 配置项。 package.json 里的 type 定义了这个项目所有 .js 文件的处理方式。 如果 type 的值为 module，那么所有 .js 文件将被当做 ES Modules 对待。如果 type 的值为 commonjs，那么所有 .js 文件将被当做 CommonJS 模块对待。如果没有设置 type，那么它的默认值为 commonjs。 ","date":"2023-01-22","objectID":"/electron/:1:1","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"创建主进程代码 新建主进程入口文件：src/main/mainEntry.ts import { app, BrowserWindow } from \"electron\"; let mainWindow: BrowserWindow; app.whenReady().then(() =\u003e { mainWindow = new BrowserWindow({}); mainWindow.loadURL(process.argv[2]); }); app 是 Electron 的全局对象，用于控制整个应用程序的生命周期。 Electron 初始化完成后，app 对象的 ready 事件被触发。 app ready 后创建一个 BrowserWindow 对象，mainWindow 被设置为一个全局变量，避免被 JS 垃圾回收机制回收。 窗口加载了一个 Url 路径，这个路径以命令行参数（第三个参数）的方式传递给应用程序。 app 和 BrowserWindow 都是 Electron 的内置模块，这些内置模块是通过 ES Module 的形式导入进来的。 ","date":"2023-01-22","objectID":"/electron/:1:2","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"开发环境 Vite 插件 主进程的代码写好后，需要编译过之后才能被 Electron 加载，通过 Vite 插件的形式来完成编译和加载工作。 import { ViteDevServer } from 'vite'; interface IAddressInfo { address: string; port: string; } export let devPlugin = () =\u003e { return { name: 'dev-plugin', configureServer(server: ViteDevServer) { require('esbuild').buildSync({ entryPoints: ['./src/main/mainEntry.ts'], bundle: true, platform: 'node', outfile: './dist/mainEntry.js', external: ['electron'], }); server?.httpServer?.once('listening', () =\u003e { let { spawn } = require('child_process'); let addressInfo: IAddressInfo = server?.httpServer?.address() as unknown as IAddressInfo; let httpAddress = `http://${addressInfo?.address}:${addressInfo?.port}`; let electronProcess = spawn(require('electron').toString(), ['./dist/mainEntry.js', httpAddress], { cwd: process.cwd(), stdio: 'inherit', }); electronProcess.on('close', () =\u003e { server.close(); process.exit(); }); }); }, }; }; 注册了一个名为 configureServer 的钩子，当 Vite 启动 Http 服务时，configureServer 会执行。 入参为类型为 ViteDevServer 的对象 server，server 持有一个 http.Server 类型的属性 httpServer，这个属性代表调试 Vue 页面的 http 服务，一般情况下地址为：http://127.0.0.1:5173/。 通过监听 server.httpServer 的 listening 事件来判断 httpServer 是否已经成功启动。如果已经成功启动，就启动 Electron 应用，并给它传递两个命令行参数，第一个参数是主进程代码编译后的文件路径，第二个参数是 Vue 页面的 http 地址。 通过 Node.js child_process 模块的 spawn 方法启动 electron 子进程，除了两个命令行参数外，还传递了一个配置对象。 这个对象的 cwd 属性用于设置当前的工作目录，process.cwd() 返回的值就是当前项目的根目录。 stdio 用于设置 electron 进程的控制台输出，这里设置 inherit 可以让 electron 子进程的控制台输出数据同步到主进程的控制台。 在主进程中 console.log 的内容就可以在 VSCode 的控制台上看到了。 当 electron 子进程退出的时候，要关闭 Vite 的 http 服务，并且控制父进程退出，准备下一次启动。 http 服务启动之前，使用 esbuild 模块完成了主进程 TypeScript 代码的编译工作，这个模块是 Vite 自带的，不需要额外安装，可以直接使用。 主进程的入口文件是通过 entryPoints 配置属性设置的，编译完成后的输出文件是通过 outfile 属性配置的。 编译平台 platform 设置为 node，排除的模块 external 设置为 electron，这两个设置使在主进程代码中可以通过 import 的方式导入 electron 内置的模块，非但如此，Node 的内置模块也可以通过 import 的方式引入。 在 vite.config.ts 文件中引入： import { defineConfig } from 'vite'; import vue from '@vitejs/plugin-vue'; import { devPlugin } from './plugins/devPlugin'; // https://vitejs.dev/config/ export default defineConfig({ plugins: [devPlugin(), vue()], }) 在 tsconfig.node.json 中配置 plugins 路径： { \"compilerOptions\": { \"composite\": true, \"module\": \"ESNext\", \"moduleResolution\": \"Node\", \"allowSyntheticDefaultImports\": true }, \"include\": [\"vite.config.ts\", \"./plugins/*.*\"] } 执行命令 npm run dev: ","date":"2023-01-22","objectID":"/electron/:1:3","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"渲染进程集成内置模块 现在主进程内可以自由的使用 Electron 和 Node.js 的内置模块了，但渲染进程还不行。 修改主进程代码，打开渲染进程的一些开关，允许渲染进程使用 Node.js 的内置模块: import { app, BrowserWindow } from 'electron'; process.env.ELECTRON_DISABLE_SECURITY_WARNINGS = 'true'; let mainWindow: BrowserWindow; app.whenReady().then(() =\u003e { let config = { webPreferences: { nodeIntegration: true, webSecurity: false, allowRunningInsecureContent: true, contextIsolation: false, webviewTag: true, spellcheck: false, disableHtmlFullscreenWindowResize: true, }, }; mainWindow = new BrowserWindow(config); mainWindow.webContents.openDevTools({ mode: 'undocked' }); mainWindow.loadURL(process.argv[2]); }); ELECTRON_DISABLE_SECURITY_WARNINGS 用于设置渲染进程开发者调试工具的警告，这里设置为 true 就不会再显示任何警告了。 nodeIntegration配置项的作用是把 Node.js 环境集成到渲染进程中。 contextIsolation配置项的作用是在同一个 JavaScript 上下文中使用 Electron API。 webContents的openDevTools方法用于打开开发者调试工具。 现在可以在开发者调试工具中访问 Node.js 和 Electron 的内置模块了。 ","date":"2023-01-22","objectID":"/electron/:1:4","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第一技能"],"content":"设置模块别名与解析钩子 虽然可以在开发者调试工具中使用 Node.js 和 Electron 的内置模块，但现在还不能在 Vue 的页面内使用这些模块。 因为 Vite 主动屏蔽了这些内置的模块，如果开发者强行引入它们，那么大概率会得到如下报错： Module \"xxxx\" has been externalized for browser compatibility and cannot be accessed in client code. 安装 vite-plugin-optimizer： npm i vite-plugin-optimizer -D 修改 vite.config.ts 的代码，让 Vite 加载这个插件： import { defineConfig } from 'vite'; import vue from '@vitejs/plugin-vue'; import { devPlugin, getReplacer } from './plugins/devPlugin'; import optimizer from 'vite-plugin-optimizer'; // https://vitejs.dev/config/ export default defineConfig({ plugins: [optimizer(getReplacer()), devPlugin(), vue()], }) vite-plugin-optimizer 插件会创建一个临时目录：node_modules.vite-plugin-optimizer。 然后把类似 const fs = require(‘fs’); export { fs as default } 这样的代码写入这个目录下的 fs.js 文件中。 渲染进程执行到：import fs from “fs” 时，就会请求这个目录下的 fs.js 文件，这样就达到了在渲染进程中引入 Node 内置模块的目的。 getReplacer 方法是为 vite-plugin-optimizer 插件提供的内置模块列表: export let getReplacer = () =\u003e { let externalModels = ['os', 'fs', 'path', 'events', 'child_process', 'crypto', 'http', 'buffer', 'url', 'better-sqlite3', 'knex']; let result = {}; for (let item of externalModels) { result[item] = () =\u003e ({ find: new RegExp(`^${item}$`), code: `const ${item} = require('${item}'); export { ${item} as default }`, }); } result['electron'] = () =\u003e { let electronModules = ['clipboard', 'ipcRenderer', 'nativeImage', 'shell', 'webFrame'].join(','); return { find: new RegExp(`^electron$`), code: `const {${electronModules}} = require('electron'); export { ${electronModules} }`, } } return result; } 在这个方法中把一些常用的 Node 模块和 electron 的内置模块提供给了 vite-plugin-optimizer 插件，以后想要增加新的内置模块只要修改这个方法即可。 vite-plugin-optimizer 插件不仅用于开发环境，编译 Vue 项目时，它也会参与工作。 通过如下代码在 Vue 组件中做测试： // src\\App.vue import fs from \"fs\"; import { ipcRenderer } from \"electron\"; import { onMounted } from \"vue\"; onMounted(() =\u003e { console.log(fs.writeFileSync); console.log(ipcRenderer); }); 开发者调试工具将会输出如下内容： ","date":"2023-01-22","objectID":"/electron/:1:5","tags":["连载","第一技能"],"title":"Electron + Vue3 桌面应用开发实战","uri":"/electron/"},{"categories":["第二技能"],"content":"项目地址： learningC- ","date":"2023-01-22","objectID":"/c-/:0:0","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["第二技能"],"content":"VSCode C++ 环境配置 ","date":"2023-01-22","objectID":"/c-/:1:0","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["第二技能"],"content":"VSCode 下载 官网下载 Visual Studio Code ","date":"2023-01-22","objectID":"/c-/:1:1","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["第二技能"],"content":"扩展包安装 C/C++ CodeLLDB ","date":"2023-01-22","objectID":"/c-/:1:2","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["第二技能"],"content":"环境配置 新建 main.cpp 文件，输入以下代码： #include \u003ciostream\u003e int main() { std::cout \u003c\u003c \"hello world\" \u003c\u003c std::endl; char c = std::getchar(); return 0; } 点击运行调试，选择 C++ (GDB/LLDB) 选择 g++ 生成和调试活动文件 在 .vscode 中会生成两个文件，对这两个文件进行配置： launch.json { // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"lldb\", \"request\": \"launch\", \"name\": \"C++ debug\", \"program\": \"${fileDirname}/${fileBasenameNoExtension}\", \"args\": [], \"cwd\": \"${workspaceFolder}\", \"preLaunchTask\": \"C/C++: g++ 生成活动文件\" } ] } tasks.json { \"tasks\": [ { \"type\": \"cppbuild\", \"label\": \"C/C++: g++ 生成活动文件\", \"command\": \"/usr/bin/g++\", \"args\": [ \"-std=c++17\", \"-stdlib=libc++\", \"-fdiagnostics-color=always\", \"-g\", \"-Wall\", \"${file}\", \"-o\", \"${fileDirname}/${fileBasenameNoExtension}\" ], \"options\": { \"cwd\": \"${fileDirname}\" }, \"problemMatcher\": [ \"$gcc\" ], \"group\": { \"kind\": \"build\", \"isDefault\": true }, \"detail\": \"调试器生成的任务。\" } ], \"version\": \"2.0.0\" } 至此，C++ 环境配置完成。 运行项目，输出结果： ","date":"2023-01-22","objectID":"/c-/:1:3","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["第二技能"],"content":"包含目录和依赖项 在 C++ 程序中包含两种文件：头文件 (.h) 和源码文件 (.cpp)，一个业务单元 (比如 a.h 和 a.cpp)，头文件负责定义类型、方法和变量，源码文件则负责实现类型、方法和为变量赋值。 源码文件为了实现头文件中定义的内容，需要通过如下方式引入头文件： #include \"a.h\" 想在 a 业务单元中引入 b 业务单元定义的内容，也需要通过 include 方式引入： #include \"bHeaderFilePath/b.h\" 可以在 a.h 中引入 b 的头文件，也可以在 a.cpp 中引入 b 的头文件。 如果是在 a.h 中引入了 b 的头文件，则 a.h 和 a.cpp 都可以使用 b 的头文件中定义的内容。 如果只在 a.cpp 中引入了 b 的头文件，则只能在 a.cpp 中使用 b 的头文件中定义的内容。 如果引入操作系统 SDK 提供的头文件或标准库提供的头文件，则不用写明头文件的相对路径，但需要用尖括号包裹。 #include \u003ciostream\u003e //这个头文件没有.h扩展名 #include \u003cwindows.h\u003e ","date":"2023-01-22","objectID":"/c-/:2:0","tags":["连载","第二技能"],"title":"C++ 前端开发菜鸡必知必会","uri":"/c-/"},{"categories":["必读经典"],"content":"001 白鹿原 一部渭河平原五十年变迁的雄奇史诗，一轴中国农村斑斓多次、触目惊心的长幅画卷。作者以陕西关中平原上素有\"仁义村\"之称的白鹿村为背景，从晚清、辛亥革命、日寇入侵、三年内战，翻云覆雨、王旗变幻、家仇国恨交错缠结，一直叙说到新中国，细腻地刻画出以白姓和鹿姓两大家族祖孙三代的恩怨纷争。 虽然我们谁也不愿意看到联邦瓦解或者发生内战，但是我更加不愿意看到自己的国家这样分裂下去。只要能够实现长远的和平团结，为之起来战斗是完全值得的。 人是个贱虫，人一天到晚坐着浑身不自在，吃饭不香，睡觉不实，总觉得慌慌兮兮。人一干活，吃饭香了，睡觉也踏实了，觉得皇帝都不怯了。 活着就要记住，人生最痛苦最绝望的那一刻是最难熬的那一刻，但不是生命结束的最后一刻，熬过去挣过去就会开始一个重要的转折，开始一个新的辉煌历程；心软一下熬不过去就死了，死了一切就都完了。 凡人们总信服圣人的圣言而又不真心实意实行，这并不是圣人的悲剧，而是凡人永远成不了圣人的缘故。 世上许多事，尽管看得清清楚楚，却不能说出口来。有的事看见了认准了，必须说出来；有的事至死也不能说。能把握住什么事必须说，什么事不能说的人，才是真正的男人。 死去的人不管因为怎样的灾祸死去，其实都如同跌入坑洼颠断了的车轴。活着的人不能总是惋惜那根断轴的好处，因为再也没有用了，必须换上新的车轴，让牛车爬上坑洼继续上路。 ","date":"2023-01-20","objectID":"/books/:1:0","tags":["连载","必读经典"],"title":"100本文学经典计划","uri":"/books/"},{"categories":["必读经典"],"content":"002 活着 当代作家余华最畅销的代表作，小说以冷静客观的叙述语言以及寓言式的单线情节，描绘了主人公福贵充满苦难的一生，表达了“人不是为了活着之外的任何事物而活，而是为了活着本身而活”的主题。 这篇《活着》，写人对苦难的承受能力，对世界乐观的态度。写作过程让我明白，人为了活着本身而活着，而不是为了活着之外的任何事物所活着。 我娘常说，只要人活得高兴，就不怕穷。家珍脱掉了旗袍，也和我一样穿上粗布衣服，她整天累得喘不过气来，还总是笑盈盈的。 老子大小也打过几十次仗了，每次我都对自己说：老子死也要活着，子弹从我身上什么地方都擦过，就是没伤着我。春生，只要想着自己不死，就死不了。 寒风从门缝冷飕飕地钻进来，吹得我两个膝盖又冷又疼，我心里就跟结了冰似的一阵阵发麻，我的一双儿女就这样都去了，到了那种时候想哭都没有了眼泪。 少年去游荡，中年想掘藏，老年做和尚。 ","date":"2023-01-20","objectID":"/books/:2:0","tags":["连载","必读经典"],"title":"100本文学经典计划","uri":"/books/"},{"categories":["必读经典"],"content":"003 长日将尽 这是一个关于英国管家的故事。小说以史蒂文斯的回忆展开，讲述了自己在为达林顿勋爵服务的三十多年中的种种经历。史蒂文斯一直梦想成为一名有尊严的“伟大的管家”，为了实现自己的人生目标，他封闭了内心、压抑了情感，追求完美地履行一切来自勋爵的指令，而他也为此付出了代价，错过了父亲临死前的最后一面，放弃了内心唯一在乎的女人。直到人生的暮年，史蒂文斯才发觉原来自己是如此的孤独，剩下的也只有回忆。 伟大的管家之所以伟大，是由于他们能够划入他们的职业角色，并且是全身心地投入，他们不会为外部事件所动摇，他们呈现出来的职业精神和专业风范就好比一位体面的绅士坚持穿着正式的套装。 真正的管家只存在于英国。在其他的国家，无论实际上冠以什么样的头衔，有的也只是男仆。 人一旦凭借着后见之明，开始在自己的过去当中寻找类似的人生“转折点”，那你就会发现它们几乎无处不在了。 这么频繁地回顾往事，总是自责我们当初的生活并没有尽如人意，又有什么好处？你我之辈，只要是曾为了某项真实而有价值的事业稍尽绵薄之力就已经足够了。 ","date":"2023-01-20","objectID":"/books/:3:0","tags":["连载","必读经典"],"title":"100本文学经典计划","uri":"/books/"},{"categories":["必读经典"],"content":"004 不能承受的生命之轻 以六十年代苏联入侵捷克时期为背景，作者通过主人公托马斯、特蕾莎、萨比娜和弗兰茨的感情生活为线索进行展开描写。其中有对个人命运的探索，有对两性关系的思考，有对人性本质的呈现。这部小说所关注的主要是历史变故下的个人命运，以及对人类困境具有永恒意义的思考，而不是对历史的描述。 当心灵在说话，理智出来高声反对，是不恰当的。 重、必然和价值是三个有内在联系的概念：必然者为重，重者才有价值。 人只有一次生命，绝无可能用实验来证明假设，因此他就永远不可能知道为情感所左右到底是对还是错。 人一旦迷醉于自身的软弱，便会一味软弱下去。会在众人的目光倒在街头，倒在地上，倒在比地面更低的地方。 人永远都无法知道自己想要什么，因为人只能活一次，即不能拿它跟前世相比，也不能在来世加以修正。没有任何方法可以检验哪种选择是好的，因为不存在任何比较。一切都是马上经历，仅此一次，不能准备。 ","date":"2023-01-20","objectID":"/books/:4:0","tags":["连载","必读经典"],"title":"100本文学经典计划","uri":"/books/"},{"categories":["必读经典"],"content":"005 围城 钱钟书所著的长篇小说，是中国现代文学史上一部风格独特的讽刺小说，被誉为“新儒林外史”。第一版于1947年由上海晨光出版公司出版。故事主要写抗战初期知识分子的群相。 城外的人想冲进去，城里的人想逃出来。 我爱的人，我要能够占领他整个生命，他在碰见我之前，没有过去，留着空白等待我。 爱情多半是不成功的，要么苦于终成眷属的厌倦，要么苦于未能终成眷属的悲哀。 结婚无需太伟大的爱情，彼此不讨厌已经够结婚资本了。 旅行是最劳顿、最麻烦，叫人本相必现的时候。经过长期苦旅行而彼此不讨厌的人，才可以结交做朋友。 世间哪有恋爱？压根儿是生殖冲动。 ","date":"2023-01-20","objectID":"/books/:5:0","tags":["连载","必读经典"],"title":"100本文学经典计划","uri":"/books/"},{"categories":["必读经典"],"content":"006 生死场 萧红的成名作，也是20世纪中国现代文学的经典之一。在《生死场》故事中，作者描述了一些女人在男权世界里卑微而无助的生活和死亡。本书以哈尔滨近郊农村为背景，描写’九一八事件’前后赵三、二里半等农民生活和抗日故事：金枝未婚先孕，赵三反抗地主加租却误打了小偷，王婆因儿子死了服毒自杀……萧红敏锐生动地把握住当时北方农民糊涂地生殖，不断面向死亡的盲目生活。 冬天，女人们像松树子那样容易结聚。 深秋带来的黄叶，赶走了夏季的蝴蝶。 在乡村，人和动物一起忙着生，忙着死。 是山么，是山你就高高的。是河么，是河你就长长的。 她们的故事便如流水一般地在夜空里延展开太阳的光线，渐渐从高空忧郁下来凄沉的阳光等待宏壮悲愤的典礼来临。 ","date":"2023-01-20","objectID":"/books/:6:0","tags":["连载","必读经典"],"title":"100本文学经典计划","uri":"/books/"},{"categories":["必读经典"],"content":"007 麦克白 讲述了主人公麦克白从一个保卫国家的英雄，因对权力的渴望，一步步变成了一个弑君篡位、残杀忠良的反面形象，最后在众叛亲离之中走向毁灭的故事。 明天，明天，再一个明天，一天接着一天地踱步前进，直到最后一秒钟时间；我们所有的明天，不过替傻子们照亮了死亡的土壤中去的路，毁灭了吧，毁灭了吧，短促的烛光。 事情要来就尽管来吧，到头来最难堪的日子也会对得过去。 世上还没有一种方法，可以从一个人的脸上探察他的居心。 星星啊，收起你们的火焰！不要让光亮照见我的黑暗幽深的愿望。 人性中无限制的纵欲是一种虐政，它曾经颠覆了不少王位，推翻了无数君主。 以不义开始的事情，必须用罪恶使它巩固。 ","date":"2023-01-20","objectID":"/books/:7:0","tags":["连载","必读经典"],"title":"100本文学经典计划","uri":"/books/"},{"categories":["必读经典"],"content":"008 理智与情感 讲述了19世纪英国中产阶级的爱情故事。达什伍德家有一对待字闺中的姐妹，姐姐埃莉诺理智而成熟，妹妹玛丽安活泼而任性，在婚姻的道路上姐妹两人都遭遇了挫折，最终也收获了属于各自的幸福。 她有着强烈的情感，却懂得如何控制情感。 我对世界了解得越多，就越觉得世界上没有一个人我会真正爱上。 生活毕竟要告诉我们，你过去相信的大半是错误的，而且你会用自己的行动来否定自己的格言。 因为心里不愿相信的事情，总会找到一点怀疑的依据。 ","date":"2023-01-20","objectID":"/books/:8:0","tags":["连载","必读经典"],"title":"100本文学经典计划","uri":"/books/"},{"categories":["必读经典"],"content":"009 蛙 莫言给经历过计划生育和在计划生育年代出生的千千万万中国人的一部触及灵魂痛处的长篇力作。 小说由剧作家蝌蚪写给日本作家杉谷义人的四封长信、“我\"的自述和一部话剧构成，讲述了\"我\"的姑姑-万心，一位从事妇产科工作五十多年的乡村女医生坎坷曲折的一生；述说了计划生育政策背景下\"生育\"给人们带来的悲与欢、喜与乐、收获与丧失。 小说用生动感人的细节和自我反省，展现了新中国六十年代波澜起伏的\"生育史”，揭露了生育问题上的混乱景象，同时也深刻剖析了以叙述人蝌蚪为代表的知识分子卑微、尴尬、纠结、矛盾的灵魂世界。 这么多年来，我总结了一条经验，解决棘手问题的最上乘方法是：静观其变，顺水推舟。 所谓爱情，其实就是一场大病，我的病就要好了。 钱不花就是一张纸，花了才是钱。 人是环境的产物，在某些特殊的环境下，懦夫可以成为勇士，强盗可以干出善行，即便是吝啬得一毛不拔者，也可能一掷千金。 ","date":"2023-01-20","objectID":"/books/:9:0","tags":["连载","必读经典"],"title":"100本文学经典计划","uri":"/books/"},{"categories":["必读经典"],"content":"010 丰乳肥臀 通过母亲上官鲁氏的一生将上官家的儿女们的命运与时代紧紧联系，透过上官家族的窗户可以窥见中国近代史的发展历史。从清末开始让我们透过上官家这些平凡的人物看见时代给中国的大地烙上了怎样的标记。上官家八个女儿的命运走向更是人生与时代的纠缠相扣，彼此无法摆脱。 上官家的人，像韭菜一样，一茬茬地生、一茬茬地发，有生就有死，死容易，活难，越难越要活，越不怕死越要挣扎着活。 他们的目光在母亲的身上上上下下移动。母亲身上，像刚刚爬过一群蜗牛，留下了粘稠的痕迹。 他的脸像被雨水泡胀又晒干的豆粒，布满了白色的皱纹，眼睛黯淡无光，粗糙的大头上，已是斑驳的白发。 柴草返潮，火焰焦黄，黑烟稠密，阳光暧昧。 半夜时分，空气阴冷潮湿，蛇一样的阴风，从山的缝隙中爬出来，摇得脱尽叶片的灌木枝条簌簌抖，卷得树下的枯叶刷刷响。 逝去的岁月，就像一条被浓雾遮住的通往草原深处的小路，只能模糊地看回去三五米，再往里就是那弥漫的雾气了。 ","date":"2023-01-20","objectID":"/books/:10:0","tags":["连载","必读经典"],"title":"100本文学经典计划","uri":"/books/"},{"categories":["必读经典"],"content":"011 一个陌生女人的来信 茨威格著名的中篇小说代表作，作者本人也曾收到过两封\"陌生女人\"的来信，正是这两封来信让茨威格有了灵感，所以，这本书也可以看成是茨威格的\"自传\"。 我希望你想起我，就像想起一片云，没有任何沉重的感觉。 你是一匹野马，我要是将你套上缰绳，就相当于杀了你。 你只喜欢轻松愉快、游戏人生、无牵无挂。你生怕干预别人的命运，你愿意滥用你的感情，用在大家身上，用在所有的人身上，可是不愿意作出任何牺牲。 我相信只要你叫我，我就是已经在坟墓里，也会突然涌出一股力量，使我站起身来，跟着你走。 我的童年，我的梦想，我的整个一生都在这里，这是我千百次望眼欲穿盼着的一扇门，现在我迈进来了，被你搂在怀里，这就是我的梦，一个终于变成真实，醒了也不会消失的梦。 ","date":"2023-01-20","objectID":"/books/:11:0","tags":["连载","必读经典"],"title":"100本文学经典计划","uri":"/books/"},{"categories":["必读经典"],"content":"012 傲慢与偏见 以日常生活为素材，生动地反映了18世纪末到19世纪初处于保守和闭塞状态下的英国乡镇生活和世态人情，描述了书中两位男女主人公爱情之路的一波三折。 凡是有财产的单身汉，必定需要娶位太太，这已经成了一条举世公认的真理。这样的单身汉，每逢新搬到一个地方，四邻八舍虽然完全不了解他的性情如何，见解如何，可是，既然这样的一条真理早已在人们心目中根深蒂固，因此人们总是把他当做自己某一个女儿理所应得的一笔财产。 达西所以喜欢彬格莱，是因为彬格莱为人温柔醇厚、坦白直爽，尽管个性方面和他自己极端相反，而他自己也从来不曾觉得自己的个性有什么不完美的地方。 班纳特太太本当听到他赞美一句，心里就得意一阵。怎奈她也没想到，他原来是把这些东西都看作他自己未来的财产，因此她又非常难受。 伊丽莎白的观察力比姐姐来得敏锐，脾气也不像姐姐那么柔顺，凡事自有主见，不会因为人家待她好而随意改变。 最好的爱情就是势均力敌，既要面包也要爱情。 ","date":"2023-01-20","objectID":"/books/:12:0","tags":["连载","必读经典"],"title":"100本文学经典计划","uri":"/books/"},{"categories":["必读经典"],"content":"013 第一炉香 讲述了一个关于具有卑微爱情观的女子的爱情故事，一个陷入了香港奢靡的物质生活中难以自拔，又爱上了一位风流倜傥的纨绔子弟的女学生，从一个懵懂无知的女孩子渐渐沦落成一个拥有华丽外在生活的交际花。这期间她凭借着自己的外在青春资本叛离了自己原本的安宁生活，为着自己的享受，为着自己的爱情而沦陷在了香港的迷雾之后。 墙里的春天，不过是虚应个景儿，谁知星星之后，可以燎原，墙里的春延烧到墙外去，满山轰轰烈烈开着野杜鹃，那灼灼的红色，一路摧枯拉朽烧下山坡子去了。 薇龙一抬眼望见钢琴上面，宝蓝瓷盘里一棵仙人掌，正是含苞欲放，那苍绿的厚叶子，四下里探着头，想一窼青蛇，那枝头的一捻红，便像吐出的蛇信子。 梁太太一双纤手，搓得那芭蕉扇柄溜溜地转，有些太阳光从芭蕉筋纹里漏进来，在她脸上跟着转。 那是个潮湿的春天的晚上，香港山上的雾时最有名的。梁家那白房子黏黏地溶化在白雾里，只看见绿玻璃窗里晃动着灯光，绿幽幽地，一方一方，像薄荷酒里的冰块，渐渐地冰块也化了水，雾浓了，窗格子里的灯光也消失了。 薇龙向东走，越走，那月亮越白，越晶亮，仿佛是一头肥胸脯的白凤凰，栖在路的转弯处，在树桠叉里做了窼。越走越觉得月亮就在前头树深处，走到了，月亮便没有了。 他把自由的那只手摸出香烟夹子和打火机来，烟卷儿衔在嘴里，点上火。火光一亮，在那凛冽的寒夜里，他的嘴上仿佛开了一朵橙红色的花，花立时谢了，又是寒冷与黑暗。 ","date":"2023-01-20","objectID":"/books/:13:0","tags":["连载","必读经典"],"title":"100本文学经典计划","uri":"/books/"},{"categories":["乱涂乱画"],"content":"001 窗台上的🐱 下辈子做一只猫，翘着尾巴云游天下，跟狗打架。 ","date":"2023-01-19","objectID":"/draw/:1:0","tags":["连载","乱涂乱画"],"title":"100张油画棒画计划","uri":"/draw/"},{"categories":["乱涂乱画"],"content":"002 🐳与☁️ 热爱漫无边际，生活自有分寸。 ","date":"2023-01-19","objectID":"/draw/:2:0","tags":["连载","乱涂乱画"],"title":"100张油画棒画计划","uri":"/draw/"},{"categories":["乱涂乱画"],"content":"003 露营⛺️ 一起去露营吧，揽星河入怀，拥山野而眠。 ","date":"2023-01-19","objectID":"/draw/:3:0","tags":["连载","乱涂乱画"],"title":"100张油画棒画计划","uri":"/draw/"},{"categories":["乱涂乱画"],"content":"004 福🐰贺春 新年快乐。 ","date":"2023-01-19","objectID":"/draw/:4:0","tags":["连载","乱涂乱画"],"title":"100张油画棒画计划","uri":"/draw/"},{"categories":["碎碎念"],"content":"2022-12 ","date":"2022-12-11","objectID":"/2022/:1:0","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-01 钱都起床了，你还不起。 ","date":"2022-12-11","objectID":"/2022/:1:1","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-02 坚持每周中强度运动150分钟/高强度运动70分钟，可以获得一个漂亮的大海马体。 ","date":"2022-12-11","objectID":"/2022/:1:2","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-03 人可以平庸，但不能踩着人往上，也不能通过贬低和否定他人，来实现自己的价值。 ","date":"2022-12-11","objectID":"/2022/:1:3","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-04 被欲望蒙蔽双眼的人，往往分不清眼前的是食物还是诱饵。 ","date":"2022-12-11","objectID":"/2022/:1:4","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-05 这支球队就像一个平凡努力的普通人的一生。他不是最强最出彩的，但你想赢他也不容易，因为他有强大的定力和拼劲，打不倒压不垮，还能绝处逢生。 ","date":"2022-12-11","objectID":"/2022/:1:5","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-06 不到最后一刻，都不算真正结束。 ","date":"2022-12-11","objectID":"/2022/:1:6","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-07 你知道养劳工为什么不能让他们不愁吃穿吗？因为他们会以为自己才是主人。 ","date":"2022-12-11","objectID":"/2022/:1:7","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-08 公司有人🐑了。。。 ","date":"2022-12-11","objectID":"/2022/:1:8","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-09 神🐱压中了🇭🇷 ","date":"2022-12-11","objectID":"/2022/:1:9","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-10 公司后端写的烂接口，一个都不能用，就混吧 ","date":"2022-12-11","objectID":"/2022/:1:10","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-11 《纸房子·第二季》 “纸房子是人民的！” 小红猪里裂开的都是💰啊。。 ","date":"2022-12-11","objectID":"/2022/:1:11","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-12 🥶🥶🥶 ","date":"2022-12-11","objectID":"/2022/:1:12","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-13 嗓子冒烟了。 ","date":"2022-12-11","objectID":"/2022/:1:13","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-14 🐑了。 ","date":"2022-12-11","objectID":"/2022/:1:14","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-15 发烧中。 ","date":"2022-12-11","objectID":"/2022/:1:15","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-16 发烧中。 ","date":"2022-12-11","objectID":"/2022/:1:16","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-17 发烧中。 ","date":"2022-12-11","objectID":"/2022/:1:17","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-18 和饼干一起晒☀️，地上铺上新毯子，🐱在地上趴着就不会🥶了。 ","date":"2022-12-11","objectID":"/2022/:1:18","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-19 🔥。 ","date":"2022-12-11","objectID":"/2022/:1:19","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-20 ","date":"2022-12-11","objectID":"/2022/:1:20","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-21 分享最近很火的一段僵尸舞，来自《星期三》 ","date":"2022-12-11","objectID":"/2022/:1:21","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-22 感谢瑞幸咖啡和同事的草莓糖，味觉和嗅觉回来了😄 ","date":"2022-12-11","objectID":"/2022/:1:22","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-23 熬夜看完了《星期三》，喜欢这种暗黑👧🏻。 ","date":"2022-12-11","objectID":"/2022/:1:23","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-24 🍎 ","date":"2022-12-11","objectID":"/2022/:1:24","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-25 Merry Christmas🎄 ","date":"2022-12-11","objectID":"/2022/:1:25","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-26 这本书很有意思。 ","date":"2022-12-11","objectID":"/2022/:1:26","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-27 IoTSharp官网新鲜出炉。 ","date":"2022-12-11","objectID":"/2022/:1:27","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-28 少年去游荡，中年想掘藏，老年做和尚。 ","date":"2022-12-11","objectID":"/2022/:1:28","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-29 烤无双，很好吃呦😄 ","date":"2022-12-11","objectID":"/2022/:1:29","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-30 和家里人保持联系，他们是这个世界上最爱你的人。 ","date":"2022-12-11","objectID":"/2022/:1:30","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":["碎碎念"],"content":"12-31 2022年的最后一天，这一年，浑浑噩噩，基本什么都没有干成。希望明年可以多做些有意义的事情。 2023年的目标： 减重到47公斤左右 继续提升第一技能，围绕react、vue3、typescript等 开始第二技能学习，玩树莓派、STEAM32、C、C++等 学一门乐器，例如尤克里里 保证参与开源项目，github争取每天都有贡献 学英语 读一百本名著 买一套属于自己的小房子 护肤、淡妆、健康、搞钱、多回家看看、多爱惜自己 ","date":"2022-12-11","objectID":"/2022/:1:31","tags":["碎碎念"],"title":"Q的乱语-2022年","uri":"/2022/"},{"categories":null,"content":"关于 LoveIt","date":"2019-08-02","objectID":"/about/","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"  LoveIt 是一个由  Dillon 开发的简洁、优雅且高效的 Hugo 博客主题。 它的原型基于 LeaveIt 主题 和 KeepIt 主题。 Hugo 主题 LoveIt ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"特性 ","date":"2019-08-02","objectID":"/about/:1:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"性能和 SEO  性能优化：在 Google PageSpeed Insights 中， 99/100 的移动设备得分和 100/100 的桌面设备得分  使用基于 JSON-LD 格式 的 SEO SCHEMA 文件进行 SEO 优化  支持 Google Analytics  支持 Fathom Analytics  支持 Plausible Analytics  支持 Yandex Metrica  支持搜索引擎的网站验证 (Google, Bind, Yandex and Baidu)  支持所有第三方库的 CDN  基于 lazysizes 自动转换图片为懒加载 ","date":"2019-08-02","objectID":"/about/:1:1","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"外观和布局  桌面端/移动端 响应式布局  浅色/深色 主题模式  全局一致的设计语言  支持分页  易用和自动展开的文章目录  支持多语言和国际化  美观的 CSS 动画 社交和评论系统  支持 Gravatar 头像  支持本地头像  支持多达 73 种社交链接  支持多达 24 种网站分享  支持 Disqus 评论系统  支持 Gitalk 评论系统  支持 Valine 评论系统  支持 Facebook comments 评论系统  支持 Telegram comments 评论系统  支持 Commento 评论系统  支持 utterances 评论系统  支持 giscus 评论系统 ","date":"2019-08-02","objectID":"/about/:1:2","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"扩展功能  支持基于 Lunr.js 或 algolia 的搜索  支持 Twemoji  支持代码高亮  一键复制代码到剪贴板  支持基于 lightGallery 的图片画廊  支持 Font Awesome 图标的扩展 Markdown 语法  支持上标注释的扩展 Markdown 语法  支持分数的扩展 Markdown 语法  支持基于 $\\KaTeX$ 的数学公式  支持基于 mermaid 的图表 shortcode  支持基于 ECharts 的交互式数据可视化 shortcode  支持基于 Mapbox GL JS 的 Mapbox shortcode  支持基于 APlayer 和 MetingJS 的音乐播放器 shortcode  支持 Bilibili 视频 shortcode  支持多种注释的 shortcode  支持自定义样式的 shortcode  支持自定义脚本的 shortcode  支持基于 TypeIt 的打字动画 shortcode  支持基于 cookieconsent 的 Cookie 许可横幅  支持人物标签的 shortcode … ","date":"2019-08-02","objectID":"/about/:1:3","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"许可协议 LoveIt 根据 MIT 许可协议授权。 更多信息请查看 LICENSE 文件。 ","date":"2019-08-02","objectID":"/about/:2:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"特别感谢 LoveIt 主题中用到了以下项目，感谢它们的作者： normalize.css Font Awesome Simple Icons Animate.css autocomplete Lunr.js algoliasearch lazysizes object-fit-images Twemoji emoji-data lightGallery clipboard.js Sharer.js TypeIt $\\KaTeX$ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/about/:3:0","tags":null,"title":"关于 LoveIt","uri":"/about/"}]